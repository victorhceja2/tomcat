.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OODoc::File 3pm"
.TH OODoc::File 3pm "2007-05-11" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
OpenOffice::OODoc::File \- I/O operations with OpenDocument files
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The explicit use of this module is generally required only in
programs which need to do some raw data import or export operations
in OOo/OpenDocument files. This module can be used as a special
wrapper of Archve::Zip.
.PP
However, a look at the constructor and the \fIsave()\fR methods is
recommended, in order to get a better knowledge of the file interface
which is used by the document-oriented modules (i.e. OODoc::XPath and
its derivatives).
.PP
If the program is only concerned with a single \s-1XML\s0 element from the
file, it is unnecessary to create an OODoc::File explicitly. Just
build an OODoc::XPath object with a filename as parameter. The XPath
will create a \*(L"private\*(R" File itself and use it to access the data
invisibly.
.PP
Please note that OODoc::File is able to handle all standard zip
archives and not just OpenOffice.org files. Filenames do not have to
have a \*(L".sx?\*(R" extension. It allows access by other modules, if
required, to XML/OpenOffice data in compressed archives which are
not necessarily in OpenOffice.org format.
.Sh "Methods"
.IX Subsection "Methods"
\fIConstructor : OpenOffice::OODoc::File\->new(<filename>)\fR
.IX Subsection "Constructor : OpenOffice::OODoc::File->new(<filename>)"
.PP
.Vb 1
\&        Short Form: ooFile(filename)
.Ve
.PP
.Vb 2
\&        Returns an instance of OODoc::File if <filename> is a valid zip
\&        archive name.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 2
\&            my $archive =
\&                OpenOffice::OODoc::File->new("my_document.odt");
.Ve
.PP
.Vb 2
\&        An optional argument can be passed in hash format (key => value),
\&        after the filename. Like this:
.Ve
.PP
.Vb 1
\&                work_dir        => "path"
.Ve
.PP
.Vb 5
\&        which designates the path to the XML working files also generated
\&        during a save for this object (each OpenOffice::OODoc::File object
\&        can have its own working directory); without this option, the
\&        working directory is set according to the content of the class
\&        variable $OpenOffice::OODoc::File::WORKING_DIRECTORY.
.Ve
.PP
.Vb 2
\&        Note: no content checking is carried out. The archive can be opened
\&        whether or not it is an OpenOffice.org document.
.Ve
.PP
.Vb 3
\&        It's possible to create an OpenOffice::OODoc::File object without
\&        providing an existing OpenOffice.org file. To do so, there is a
\&        special option:
.Ve
.PP
.Vb 1
\&                create          => "class"
.Ve
.PP
.Vb 5
\&        where "class" is the document class according to the OpenOffice.org
\&        terminology, so it is one of the following values: "text",
\&        spreadsheet", "presentation", "drawing". These values are the same
\&        as the legal parameters of contentClass() in OpenOffice::OODoc::XPath.
\&        For a very advanced use, it's possible to pass an additional option
.Ve
.PP
.Vb 1
\&                template_path   => "path"
.Ve
.PP
.Vb 4
\&        to generate the new file from special, user-provided XML templates
\&        instead of those included in the installation. If this option is
\&        not provided, the general template path (possibly changed with
\&        the templatePath() function) is used.
.Ve
.PP
.Vb 9
\&        When the "create" option is used, it's possible to provide an
\&        "opendocument" option in order to override the installation-level
\&        default file format for new documents. If this option is set to
\&        "1", "on" or "true", the new document will comply to the OASIS
\&        OpenDocument format (OpenOffice.org 2.0); if it's set to "0",
\&        "off" or "false", the new document will be created according to
\&        the OpenOffice.org 1.0 format. The "opendocument" option is ignored
\&        without the "create" one (this tool is not a format converter for
\&        existing documents).
.Ve
.PP
.Vb 2
\&        The returned object of new(), if successful, is a valid File object,
\&        whose methods listed below become available.
.Ve
.PP
.Vb 4
\&        If unsuccessful (generally due to non-existent file or invalid zip
\&        archive or even a corrupt zip archive), the constructor returns a
\&        null value (undef), and an error message is sent to the standard
\&        output.
.Ve
.PP
\fIextract(<member>)\fR
.IX Subsection "extract(<member>)"
.PP
.Vb 9
\&        Returns the decompressed content of the requested member, if
\&        contained in the archive and corresponds to an XML element of the
\&        currently active OpenOffice.org file instance. The <member>
\&        parameter must therefore correspond to one of the members of the
\&        file (see Introduction). If the application uses any of the words
\&        "content", "meta", "styles" or "settings", in upper or lower case,
\&        the .xml extension is automatically added but any other names are
\&        accepted without change if they are indeed existing members of the
\&        archive.
.Ve
.PP
.Vb 1
\&        The following statements are equivalent:
.Ve
.PP
.Vb 3
\&            my $content = $archive->extract('META');
\&            my $content = $archive->extract('meta.xml');
\&            my $content = $archive->extract('meta);
.Ve
.PP
.Vb 3
\&        After the above calls, the variable $content contains the XML
\&        document which represents the metadata of an OpenOffice.org file.
\&        This content can be used, for example, to instance a Meta object.
.Ve
.PP
.Vb 6
\&        Note: in most "normal" cases, this method does not have to be called
\&        explicitly as it is called silently by each occurrence of XPath
\&        (therefore by Text and Meta which are derivatives of it), but only
\&        if XPath is constructed referencing an OODoc::File object as a
\&        parameter (see OODoc::XPath). An extract call is only useful when
\&        exporting the XML or handling it outside of OODoc::XPath.
.Ve
.PP
.Vb 2
\&        On error (e.g. unknown archive member), a null value is returned and
\&        an error message is produced.
.Ve
.PP
\fIlink(<XPath_object>)\fR
.IX Subsection "link(<XPath_object>)"
.PP
.Vb 2
\&        Connects a File object to an XPath object given as an argument. This
\&        connection has two output products:
.Ve
.PP
.Vb 6
\&            - immediately calls the extract method using the corresponding
\&            "specialist" component of the XPath object (metadata if
\&            OODoc::Meta, content if OODoc::Text, etc).
\&            - stores the link for later updates to all OpenOffice.org file
\&            members which may have been modified by XPath objects (in case a
\&            save is called, see below).
.Ve
.PP
.Vb 3
\&        Note: This method is used by OODoc::XPath to connect as "clients" to
\&        OODoc::File objects. It does not have to be called directly by
\&        highest-level programs which only use OODoc::XPath objects.
.Ve
.PP
\fIraw_delete(member)\fR
.IX Subsection "raw_delete(member)"
.PP
.Vb 1
\&        Orders the deletion of any OpenOffice.org file member.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 1
\&            $archive->raw_delete("Pictures/100000AEFGH.jpg");
.Ve
.PP
.Vb 1
\&        deletes the physical content of an image loaded in the file.
.Ve
.PP
.Vb 7
\&        It is entirely up to the application to ensure that such a deletion
\&        does not compromise the integrity of the file as no dependency
\&        checking is carried out here. In the above example, the delete
\&        operation could be particularly justified if the "image" member
\&        which referenced this content had been (or was going to be)
\&        otherwise removed, or if it had been replaced by an external
\&        reference.
.Ve
.PP
.Vb 7
\&        This method can be used to remove any XML or non-XML member. It can
\&        be combined with raw_import() in order to effect a raw replacement
\&        of content without interpretation. Caution: this method should not
\&        be used for an XML member (content, style, meta, etc.) which is
\&        currently "active" (i.e. linked to an active OODoc::XPath instance),
\&        unless the member has been loaded as "read only" (search in the
\&        OpenOffice::OODoc::XPath for the "read_only" option).
.Ve
.PP
.Vb 6
\&        Note: calls to this method only prepare the deletion, which is
\&        actually carried out by the save() method if it occurs before the
\&        end of the program. If save() is called with a filename which is
\&        different from the source filename, the source file remains
\&        unchanged and the deleted member is simply not transferred to the
\&        target file.
.Ve
.PP
\fIraw_export(member [, destination])\fR
.IX Subsection "raw_export(member [, destination])"
.PP
.Vb 4
\&        Decompresses and exports the physical content of a given member (XML
\&        or non-XML) of an archive. If the second argument is used, it passes
\&        the destination filename (perhaps with access path). If not, the
\&        file is exported using its internal archive name. Examples:
.Ve
.PP
.Vb 1
\&            $archive->raw_export("styles.xml");
.Ve
.PP
.Vb 2
\&        exports the "styles.xml" member into a file of the same name in the
\&        current directory.
.Ve
.PP
.Vb 1
\&            $archive->raw_export("styles.xml", "/tmp/my_style.xml");
.Ve
.PP
.Vb 1
\&        exports the same XML member to a given path.
.Ve
.PP
.Vb 2
\&        raw_export executes immediately (and is not deferred like
\&        raw_import).
.Ve
.PP
.Vb 2
\&        If successful, the returned value is the filename of the exported
\&        file.
.Ve
.PP
\fIraw_import(member [, source])\fR
.IX Subsection "raw_import(member [, source])"
.PP
.Vb 3
\&        Creates or replaces the indicated member by importing an external
\&        source file. If the second argument is omitted, the source file is
\&        taken to have the same access path as the internal member.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 2
\&            $arch1->raw_export("styles.xml", "/tmp/styles.xml");
\&            $arch2->raw_import("styles.xml", "/tmp/styles.xml");
.Ve
.PP
.Vb 1
\&        or, in more compact form:
.Ve
.PP
.Vb 5
\&            $arch2->raw_import
\&                (
\&                "styles.xml",
\&                $arch1->raw_export("styles.xml")
\&                );
.Ve
.PP
.Vb 4
\&        The above sequence requests the import of the member "styles.xml"
\&        from an archive called $arch1 into $arch2 (a direct means of using
\&        the styles and page layout of one document as a template for
\&        another).
.Ve
.PP
.Vb 5
\&        The imported files can be any type and have any content. This "raw"
\&        method treats an OpenOffice.org file as any other zip archive. It
\&        notably allows the import of non-XML members (images, sounds,
\&        programs, etc) which the application deals with (and which can be
\&        ignored by the office application).
.Ve
.PP
.Vb 10
\&        Caution: the import is only completed when a save() method is called
\&        by the importing object. It can only succeed if the source file is
\&        available at that very moment. A raw_import method can be called
\&        before the imported file is available (no check of availability is
\&        made). An error will be caused if the file is absent at the time of
\&        the save call. If several raw_import statements are run against the
\&        same filename, there will actually be a corresponding number of
\&        copies of the file in its final state which are imported at the
\&        moment of the save, even if it had perhaps been modified in the
\&        meantime (probably not a very useful outcome).
.Ve
.PP
\fIsave([<filename>])\fR
.IX Subsection "save([<filename>])"
.PP
.Vb 6
\&        Saves the content of the archive to a file replacing the content of
\&        some or all of the XML members with data supplied by the linked
\&        OODoc::XPath object(s). Each updated member must be indicated in the
\&        form of a hash element whose key corresponds to a standard XML
\&        member of an OpenOffice.org file, in the same way as for an extract
\&        call with the value being the new XML content to be saved.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 1
\&                $archive->save("target.odt");
.Ve
.PP
.Vb 5
\&        Please note that File does not check the content, and the save
\&        method can be used to force through any data which may produce a
\&        file unusable by StarOffice/OpenOffice.org. Normally, supplied data
\&        should have been produced by an XPath object or other application
\&        producing OpenOffice.org XML.
.Ve
.PP
.Vb 6
\&        The filename argument is optional. If it is omitted, the source file
\&        previously supplied by the constructor call is used. In fact in this
\&        case a more complex (but hidden) operation is carried out: firstly
\&        it writes to a temporary file and if no error occurs, the source file
\&        is deleted and its name given to the temporary file. OODoc::File never
\&        writes directly to the source file.
.Ve
.PP
.Vb 5
\&        Even though the life of an OODoc::File object does not necessarily
\&        end with a save, it is recommended that you avoid repeated
\&        alternation between save and extract (the object's behaviour in this
\&        situation has not been tested). Normally it is preferable to call a
\&        save once and for all at the end of a series of updates.
.Ve
.PP
.Vb 5
\&        Only a call to OODoc::File's save() method saves content, metadate and
\&        presentation changes made by other OODoc components to the
\&        OpenOffice.org file, including raw imports of external data
\&        (raw_import). However, the XML members currently associated with
\&        "read only" OODoc::XPath objects are not changed in the file.
.Ve
.PP
.Vb 6
\&        No file is created or modified before this method is
\&        called, with the exception of external files created by raw_export.
\&        Nevertheless File's save can be called automatically and silently by
\&        an OODoc::XPath object but only where it has been called as a
\&        parameter explicitly for this purpose (see the chapter on
\&        OODoc::XPath).
.Ve
.PP
.Vb 5
\&        All XPath objects which are "connected" to a File object by link
\&        must be present at the time of the save call. If one of these
\&        objects has meanwhile been deleted, the consequences are
\&        unpredictable and, in any case, any document updates it could have
\&        made are lost.
.Ve
.PP
\fItemplatePath([path])\fR
.IX Subsection "templatePath([path])"
.PP
.Vb 1
\&        Class function (not to be used as a method).
.Ve
.PP
.Vb 5
\&        Accessor to get/set the path for a user-defined set of XML templates,
\&        to be used in case of new document creation. This path is empty by
\&        default. Without an explicit template path, the default XML templates
\&        provided with the OpenOffice::OODoc distribution are automatically
\&        selected.
.Ve
.PP
.Vb 6
\&        The given path, if any, must correspond to a directory with the
\&        "text", "presentation", "spreadsheet" and "drawing" subdirectories,
\&        each one containing the appropriates XML templates for the
\&        corresponding document class and their associated non-XML data, if
\&        any (ex: images). These templates can be produced, for example, by
\&        uncompressing ordinary OpenOffice.org files.
.Ve
.Sh "Properties"
.IX Subsection "Properties"
.Vb 1
\&        No class variables are exported.
.Ve
.PP
.Vb 5
\&        The class variable $OpenOffice::OODoc::File::WORKING_DIRECTORY
\&        indicates the directory to be used for temporary files (used but the
\&        save() method) when no object-specific path is provided through the
\&        'work_dir' option. By default, the working directory is the current
\&        directory ('.').
.Ve
.PP
.Vb 3
\&        The $OpenOffice::OODoc::File::TEMPLATE_PATH variable, empty by
\&        default, can contain an alternative path for document generation
\&        template files; it can be set with the templatePath() function.
.Ve
.PP
.Vb 7
\&        The $OpenOffice::OODoc::File::$DEFAULT_OFFICE_FORMAT variable,
\&        whose default is 2, controls the default format for newly created
\&        files (when the format is not explicitly selected by the application).
\&        Allowed values are "1" for OpenOffice.org 1.0 and "2" for
\&        OASIS OpenDocument. In a regular installation, this variable is
\&        automatically set according to the <File-DEFAULT_OFFICE_FORMAT>
\&        element of the config.xml file (see INSTALL).
.Ve
.PP
.Vb 1
\&        Instance hash variables are:
.Ve
.PP
.Vb 4
\&            'linked'            => list of connected OODoc::XPath instances
\&            'members'           => list of file member (*.xml and others)
\&            'raw_members'       => list of import files
\&            'temporary_files'   => created temporary files.
.Ve
.PP
.Vb 1
\&        Where $f is a given instance of OODoc::File, the table
.Ve
.PP
.Vb 1
\&            @{$f->{'linked'}}
.Ve
.PP
.Vb 2
\&        is a list of OODoc::XPath objects which were connected to $f by the
\&        link method and
.Ve
.PP
.Vb 1
\&            @{$f->{'members'}}
.Ve
.PP
.Vb 1
\&        is a list of members found in the archive when new is called.
.Ve
.PP
.Vb 4
\&        These variables can be read at any time even though they were
\&        normally designed to be used internally by OODoc::File. Unless you
\&        are just finding out exactly what they do, it is dangerous to modify
\&        them. Applications do not normally need to access them.
.Ve
.SH "AUTHOR/COPYRIGHT"
.IX Header "AUTHOR/COPYRIGHT"
Developer/Maintainer: Jean-Marie Gouarne <http://jean.marie.gouarne.online.fr>
.PP
Contact: jmgdoc@cpan.org
.PP
Copyright 2004\-2006 by Genicorp, S.A. <http://www.genicorp.com>
.PP
Initial English version of the reference manual by Graeme A. Hunter
(graeme.hunter@zen.co.uk).
.PP
License:
.PP
.Vb 2
\&        - Licence Publique Generale Genicorp v1.0
\&        - GNU Lesser General Public License v2.1
.Ve
