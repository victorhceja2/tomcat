.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OODoc 3pm"
.TH OODoc 3pm "2007-05-11" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
OpenOffice::OODoc \- The Perl Open OpenDocument Connector
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use OpenOffice::OODoc;
.Ve
.PP
.Vb 35
\&                        # get global access to the content of an OOo file
\&        my $document = ooDocument(file => "MyFile.odt");
\&                        # select a text element containing a given string
\&        my $place = $document->selectElementByContent("my search string");
\&                        # insert a new text element before the selected one
\&        my $newparagraph = $document->insertParagraph
\&                        (
\&                        $place,
\&                        position        => 'before',
\&                        text            => 'A new paragraph to be inserted',
\&                        style           => 'Text body'
\&                        );
\&                        # define a new graphic style, to display images
\&                        # with 20% extra luminance and color inversion
\&        $document->createImageStyle
\&                        (
\&                        "NewImageStyle",
\&                        properties      =>
\&                                {
\&                                'draw:luminance'        => '20%',
\&                                'draw:color-inversion'  => 'true'
\&                                }
\&                        );
\&                        # import an image from an external file, attach it
\&                        # to the newly inserted paragraph, to be displayed
\&                        # using the newly created style
\&        $document->createImageElement
\&                        (
\&                        "Image1",
\&                        style           => "NewImageStyle",
\&                        attachment      => $newparagraph,
\&                        import          => "D:\eImages\eLandscape.jpg"
\&                        );
\&                        # save the modified document
\&        $document->save;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This toolbox is an extensible Perl interface allowing direct read/write
operations on files which comply with the \s-1OASIS\s0 Open Document Format for
Office Applications (\s-1ODF\s0), i.e. the \s-1ISO/IEC\s0 26300:2006 standard.
.PP
It provides a high\-level, document-oriented language, and isolates the
programmer from the details of the file format. It can process different
document classes (texts, spreadsheets, presentations, and drawings).
It can retrieve or update styles and images, document metadata, as well as
text content.
.PP
OpenOffice::OODoc is designed for data retrieval and update in existing
documents, as well as full document generation.
.SH "HOW TO USE THE DOCUMENTATION"
.IX Header "HOW TO USE THE DOCUMENTATION"
The present chapter, then the OpenOffice::OODoc::Intro one, should be
read before any attempt to dig in the detailed documentation.
.PP
The reference manual is provided in several separate chapters as
described below.
.PP
The OpenOffice::OODoc documentation, as the \s-1API\s0 itself, is distributed
amongst several manual pages on a thematic and technical basis. The present
page is a general foreword only.
.PP
Each manual page correspond to a Perl module, with the exception of
OpenOffice::OODoc::Intro. It's strongly recommended to have a look at
the Intro, and to read the examples, before any other manual chapter, in
order to get a quick and practical knowledge of the big picture. Another
possible introductory reading has been published in The Perl Review
(issue #3.1, dec. 2006) <http://www.theperlreview.com>, while an alternative
presentation article, intended for French-reading users, can be downloaded at
<http://jean.marie.gouarne.online.fr/doc/perl_odf_connector.pdf>
.PP
The \s-1API\s0 is object-oriented and, with the exception of the main module
(OpenOffice::OODoc itself), each module defines a class. The features of each
module are documented in a manual page with the same name. But, while some
classes inherit from other ones, they bring a lot of features that are not
documented in the corresponding manual page. The best example is
OpenOffice::OODoc::Document: it contains a few method definitions by itself,
but it's the most powerful class, because it inherits from four other classes,
so it's features are documented in five manual pages. Fortunately, the classes
are defined on a functional basis. So, for example, to know the text-related
capabilities of a Document object, the user should select the Text manual page
before the Document one.
.PP
The detailed documentation of the \s-1API\s0 is distributed according to the
following list:
.Sh "OpenOffice::OODoc"
.IX Subsection "OpenOffice::OODoc"
The present manual page contains (in the \s-1GENERAL\s0 \s-1FUNCTIONS\s0 section below) the
description of a small number of miscellaneous functions, dedicated to control
some general parameters, to create the main objects of the applications, or to
provide the user with some basic utilities.
.Sh "OpenOffice::OODoc::File"
.IX Subsection "OpenOffice::OODoc::File"
This manual page contains detailed information about the physical access to
the OpenOffice.org files. In some simple applications, this page can be
ignored without risk.
.Sh "OpenOffice::OODoc::XPath"
.IX Subsection "OpenOffice::OODoc::XPath"
It describes all the common features, that are provided by the corresponding
class, and available in every other class with the exception of OODoc::File.
This manual page describes the low level, XPath-based \s-1XML\s0 \s-1API\s0 of
OpenOffice::OODoc. It can be necessary for advanced applications, but can be
ignored at first look. However, the Text, Image, Styles, Document and Meta
objects inherit all the features of the XPath object, so this manual page
can be useful even if the user don't need to work with explicit XPath objects.
.Sh "OpenOffice::OODoc::Text"
.IX Subsection "OpenOffice::OODoc::Text"
This manual page describes all the high level text processing methods and
allows the user's program to deal with all the text containers (headers,
paragraphs, item lists, tables, and footnotes). It can deal with any text
content in any OOo document, and not only in Writer documents (a special
mapping allows the programmer to address rows and cells in the same way in
spreadsheets as in the tables belonging to other documents).
.Sh "OpenOffice::OODoc::Image"
.IX Subsection "OpenOffice::OODoc::Image"
This manual page describes all the graphics manipulation \s-1API\s0, i.e. all the
available syntax dedicated to insert or remove images in the documents, and
to control the presentation of these images.
.Sh "OpenOffice::OODoc::Styles"
.IX Subsection "OpenOffice::OODoc::Styles"
This manual page describes the methods to be used to control the styles
of a document, knowing that each page layout, each text element, and each
image is displayed or printed according to a style. This part of the
documentation can be ignored if the user's programs are strictly content\-
focused and don't care with the presentation.
.Sh "OpenOffice::OODoc::Document"
.IX Subsection "OpenOffice::OODoc::Document"
This manual page describe some miscellaneous methods that deal simultaneously
with text, presentation and/or images. So, in order to discover the capabilities
of a \*(L"Document\*(R" object (created with ooDocument), the user should use the Text,
Image, Styles \s-1AND\s0 Document manual pages. The OpenOffice::OODoc::Document class
inherits all the features provided by the other classes with the exceptions of
OpenOffice::OODoc::File and OpenOffice::OODoc::Meta.
.Sh "OpenOffice::OODoc::Meta"
.IX Subsection "OpenOffice::OODoc::Meta"
This manual page describes all the available methods to be used in order to
control the global properties (or \*(L"metadata\*(R") of a document. Most of these
properties are those an end-user can get or set through the \*(L"File/Properties\*(R"
command with the OpenOffice.org desktop software.
.Sh "OpenOffice::OODoc::Manifest"
.IX Subsection "OpenOffice::OODoc::Manifest"
This manual page describes the manifest management \s-1API\s0, knowing that the
manifest, in an OpenOffice.org file, contains the list of the file components
(or \*(L"members\*(R") and the media type (or \s-1MIME\s0) of each one. The text content,
the style definitions, the embedded images, etc. are each one stored as a
separate \*(L"member\*(R".
.SH "GENERAL FUNCTIONS"
.IX Header "GENERAL FUNCTIONS"
\fI\fIodfConnector()\fI\fR
.IX Subsection "odfConnector()"
.PP
.Vb 1
\&        See ooDocument().
.Ve
.PP
\fI\fIodfContainer()\fI\fR
.IX Subsection "odfContainer()"
.PP
.Vb 1
\&        See ooFile().
.Ve
.PP
\fIodfDecodeText($ootext)\fR
.IX Subsection "odfDecodeText($ootext)"
.PP
.Vb 5
\&        Returns the translation of a raw OpenOffice.org (UTF-8) in
\&        the local character set. While the right translation is automatically
\&        done by the regular text read/write methods of OpenOffice::OODoc, this
\&        function is useful only if the user's application needs to bypass the
\&        API.
.Ve
.PP
\fIodfEncodeText($ootext)\fR
.IX Subsection "odfEncodeText($ootext)"
.PP
.Vb 7
\&        Returns the translation of an application-provided string,
\&        made of local characters, in an OpenOffice.org (UTF-8) string.
\&        The given string must comply with the active local encoding (see
\&        odfLocalEncoding()). While the right translation is automatically done
\&        by the regular text read/write methods of OpenOffice::OODoc, this
\&        function is useful only if the user's application needs to bypass the
\&        API.
.Ve
.PP
\fIodfLocalEncoding([character_set])\fR
.IX Subsection "odfLocalEncoding([character_set])"
.PP
.Vb 3
\&        Accessor to get/set the user's local character set
\&        (see $OpenOffice::OODoc::XPath::LOCAL_CHARSET in the
\&        OpenOffice::OODoc::XPath man page).
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 2
\&                $old_charset = odfLocalEncoding();
\&                odfLocalEncoding('iso-8859-15');
.Ve
.PP
.Vb 4
\&        If the given argument is an unsupported encoding, an error
\&        message is produced and the old encoding is preserved. So
\&        this accessor is safer than a direct update of the
\&        $OpenOffice::OODoc::XPath::LOCAL_CHARSET variable.
.Ve
.PP
.Vb 6
\&        The default local character set is fixed according to the
\&        "OODoc/config.xml" file of your local OpenOffice::OODoc installation
\&        (see readConfig() below), or to "iso-8859-1" if this file is missing
\&        or doesn't say anything about the local character set. By calling
\&        ooLocalEncoding() with an argument, the user's programs can override
\&        this default.
.Ve
.PP
.Vb 3
\&        Note: the user can override this setting for a particular document,
\&        using the 'local_encoding' property of the document object (see the
\&        OpenOffice::OODoc::XPath manual page).
.Ve
.PP
.Vb 2
\&        See the Encode::Supported (Perl) documentation for the list
\&        of supported encodings.
.Ve
.PP
\fI\fIodfPackage()\fI\fR
.IX Subsection "odfPackage()"
.PP
.Vb 1
\&        See ooFile().
.Ve
.PP
\fIodfReadConfig([filename])\fR
.IX Subsection "odfReadConfig([filename])"
.PP
.Vb 6
\&        Creates or resets some variables of the API according to the
\&        content of an XML configuration file. Without argument, this
\&        function looks for 'OODoc/config.xml' under the installation
\&        directory of OpenOffice::OODoc. In any case, the provided file
\&        must have the same XML structure as the config.xml file included
\&        in the distribution, so:
.Ve
.PP
.Vb 10
\&        <?xml version="1.0" encoding="UTF-8"?>
\&        <config>
\&            <OpenOffice-OODoc>
\&                <XPath-LOCAL_CHARSET>my_charset</XPath-LOCAL_CHARSET>
\&                <Styles-COLORMAP>my_colormap_file</Styles-COLORMAP>
\&                <File-WORKING_DIRECTORY>my_path</File-WORKING_DIRECTORY>
\&                <File-DEFAULT_OFFICE_FORMAT>2</File-DEFAULT_OFFICE_FORMAT>
\&                <INSTALLATION_DATE>my_oo_date</INSTALLATION_DATE>
\&            </OpenOffice-OODoc>
\&        </config>
.Ve
.PP
.Vb 2
\&        In the example above, "my_oo_date" should be replaced by a regular
\&        ISO-8601 date (YYYY-MM-DDThh:mm:ss).
.Ve
.PP
.Vb 4
\&        Elements out of the <OpenOffice-OODoc> element are ignored.
\&        Any element included in <OpenOffice-OODoc> sets or update a variable
\&        with the same name and the given value in the space of the
\&        OpenOffice::OODoc package. So, for example an element like
.Ve
.PP
.Vb 1
\&                <strange_thing>a strange value</strange_thing>
.Ve
.PP
.Vb 3
\&        will make a new $OpenOffice::OODoc::strange_thing variable,
\&        initialized with the string "a strange value", available for any
\&        program using OpenOffice::OODoc.
.Ve
.PP
.Vb 1
\&        Attributes and sub-elements are ignored.
.Ve
.PP
.Vb 1
\&        Strings with characters larger than 7 bits must be encoded in UTF-8.
.Ve
.PP
.Vb 4
\&        Any '-' character appearing in the name of an element is replaced
\&        by '::' in the name of the corresponding variable, so, for example,
\&        the <XPath-LOCAL_CHARSET> element controls the initial value of
\&        $OpenOffice::OODoc::XPath::LOCAL_CHARSET.
.Ve
.PP
.Vb 2
\&        All the variables defined in this file, are the file itself, are
\&        optional.
.Ve
.PP
.Vb 6
\&        The <INSTALLATION_DATE> element is not used by the API; it's provided
\&        for information only. It allows the user to get (in OpenOffice format)
\&        the date of the last installation of OpenOffice::OODoc, through the
\&        variable $OpenOffice::OODoc::INSTALLATION_DATE. In the default
\&        config.xml provided with the distribution, this element contains the
\&        package generation date.
.Ve
.PP
.Vb 2
\&        This function is automatically executed as soon as OpenOffice::OODoc
\&        is used, if the OODoc/config.xml configuration file exists.
.Ve
.PP
\fIodfTemplatePath([path])\fR
.IX Subsection "odfTemplatePath([path])"
.PP
.Vb 1
\&        Shortcut for OpenOffice::OODoc::File::templatePath().
.Ve
.PP
.Vb 3
\&        Accessor to get/set an alternative path for the XML template files
\&        used to create new documents. See the manual page for the
\&        OpenOffice::OODoc::File module.
.Ve
.PP
\fIodfWorkingDirectory([path])\fR
.IX Subsection "odfWorkingDirectory([path])"
.PP
.Vb 9
\&        Accessor to get/set the working directory to use for temporary
\&        files. Short-lived temporary files are generated each time the save()
\&        function (see OpenOffice::OOdoc::File) is called. If case of success,
\&        these files are automatically removed when the call returns, so the
\&        user can't view them. If something goes wrong during the I/O
\&        processing, the temporary files remain available for debugging. In any
\&        case, a working directory is necessary to create or update documents.
\&        However, OpenOffice::OODoc can be used without available working
\&        directory in a read-only application.
.Ve
.PP
.Vb 5
\&        The default working directory depends on the "OODoc/config.xml" file
\&        of your local OpenOffice::OODoc installation. If this file is missing
\&        or if it doesn't contain a <File-WORKING_DIRECTORY> element, the
\&        working directory is "." (i.e. the current working directory of the
\&        user's application).
.Ve
.PP
.Vb 2
\&        If an argument is given, it replaces the current working
\&        directory.
.Ve
.PP
.Vb 4
\&        A warning is issued if the (existing or newly set) path is not
\&        a directory with write permission. After this warning, the user's
\&        application can run, but any attempted file update or creation
\&        fails.
.Ve
.PP
.Vb 4
\&        This accessor sets only the default working directory for the
\&        application. A special, separate working directory can be set
\&        for each OOo document (see the manual page for OpenOffice::OODoc::File
\&        for details, if needed).
.Ve
.PP
.Vb 3
\&        CAUTION: a odfWorkingDirectory() call can't change the working
\&        directory of a previously created File object. So, consider the
\&        following code sequence:
.Ve
.PP
.Vb 3
\&                my $doc0 = ooDocument(file => 'doc0.odt');
\&                odfWorkingDirectory('C:\eTMP');
\&                my $doc1 = ooDocument(file => 'doc1.odt');
.Ve
.PP
.Vb 3
\&        In this example, all the write operations related to the $doc0
\&        document will use the default working directory, while the ones
\&        related to $doc1 will use "C:\eTMP".
.Ve
.PP
\fI\fIooDocument()\fI\fR
.IX Subsection "ooDocument()"
.PP
.Vb 1
\&        Shortcut for OpenOffice::OODoc::Document->new().
.Ve
.PP
.Vb 9
\&        This function is the most general document constructor. It creates
\&        and returns a new Document object. It can be instantiated on the basis of
\&        an existing OpenOffice.org file, or using XML, OpenOffice-compliant
\&        data previously loaded in memory. With an appropriate "create"
\&        parameter, it can be used in order to create a new document from scratch
\&        as well. The Document class provides methods allowing a lot of read/update
\&        operations in the text content, the graphics, and the presentation.
\&        So ooDocument() is the recommended first call to get access to a document
\&        for further processing.
.Ve
.PP
.Vb 1
\&        See the OpenOffice::OODoc::Document manual page for detailed syntax.
.Ve
.PP
\fI\fIooDecodeText()\fI\fR
.IX Subsection "ooDecodeText()"
.PP
.Vb 1
\&        See odfDecodeText().
.Ve
.PP
\fI\fIooEncodeText()\fI\fR
.IX Subsection "ooEncodeText()"
.PP
.Vb 1
\&        See odfEncodeText().
.Ve
.PP
\fI\fIooFile()\fI\fR
.IX Subsection "ooFile()"
.PP
.Vb 1
\&        Shortcut for OpenOffice::OODoc::File->new().
.Ve
.PP
.Vb 3
\&        This function returns a File object, that is the object representation
\&        of the physical file containing the text, the images and the style
\&        definitions of an OpenOffice.org document.
.Ve
.PP
.Vb 4
\&        See the OpenOffice::OODoc::File manual page for detailed syntax.
\&        See the OpenOffice::OODoc::Intro manual page to know why, in some
\&        situations, the using applications need or don't need to deal with
\&        explicit File objects.
.Ve
.PP
\fI\fIooImage()\fI\fR
.IX Subsection "ooImage()"
.PP
.Vb 1
\&        Shortcut for OpenOffice::OODoc::Image->new().
.Ve
.PP
.Vb 3
\&        This function returns a Image object, that brings a subset of the
\&        Document object. Il can be used in place of ooDocument() if the
\&        calling application needs some image manipulation methods only.
.Ve
.PP
.Vb 1
\&        See the OpenOffice::OODoc::Image manual page for detailed syntax.
.Ve
.PP
\fI\fIooLocalEncoding()\fI\fR
.IX Subsection "ooLocalEncoding()"
.PP
.Vb 1
\&        See odfLocalEncoding().
.Ve
.PP
\fI\fIooManifest()\fI\fR
.IX Subsection "ooManifest()"
.PP
.Vb 1
\&        Short cut for OpenOffice::OODoc::Manifest->new().
.Ve
.PP
.Vb 2
\&        This function returns a Manifest object, giving access to the
\&        meta-information of the physical archive containing the document.
.Ve
.PP
\fI\fIooMeta()\fI\fR
.IX Subsection "ooMeta()"
.PP
.Vb 1
\&        Shortcut for OpenOffice::OODoc::Meta->new().
.Ve
.PP
.Vb 4
\&        This function returns a Meta object. Such an object represents the
\&        global properties, or "metadata", of a document. It brings a set of
\&        accessors allowing the user to get or set some properties such as
\&        the title, the keyword, the description, the creator, etc.
.Ve
.PP
.Vb 1
\&        See the OpenOffice::OODoc::Meta manual page for details.
.Ve
.PP
\fI\fIooReadConfig()\fI\fR
.IX Subsection "ooReadConfig()"
.PP
.Vb 1
\&        See odfReadConfig().
.Ve
.PP
\fI\fIooStyles()\fI\fR
.IX Subsection "ooStyles()"
.PP
.Vb 1
\&        Shortcut for OpenOffice::OODoc::Styles->new().
.Ve
.PP
.Vb 6
\&        This function returns a Style object, that brings a subset of the
\&        Document object. In can be used in place of ooDocument() if the
\&        calling application needs some style/presentation manipulation
\&        methods only. Note the 's' at the end of 'Styles': this object doesn't
\&        represent a particular style; it represents a set of styles related
\&        to a document.
.Ve
.PP
.Vb 1
\&        See the OpenOffice:OODoc::Styles manual page for detailed syntax.
.Ve
.PP
\fI\fIooTemplatePath()\fI\fR
.IX Subsection "ooTemplatePath()"
.PP
.Vb 1
\&        See odfTemplatePath().
.Ve
.PP
\fI\fIooText()\fI\fR
.IX Subsection "ooText()"
.PP
.Vb 1
\&        Shortcut for OpenOffice::OODoc::Text->new().
.Ve
.PP
.Vb 6
\&        This function returns a Text object, that brings a subset ot the
\&        Document object. It can be used in place of ooDocument() if the
\&        calling application is only text-focused (i.e. if it doesn't need
\&        to deal with graphics and styles). The processed document can contain
\&        (and probably contains) graphics and styles, but the methods to
\&        process them are simply not loaded.
.Ve
.PP
.Vb 1
\&        See the OpenOffice::OODoc::Text manual page for detailed syntax.
.Ve
.PP
\fI\fIooWorkingDirectory()\fI\fR
.IX Subsection "ooWorkingDirectory()"
.PP
.Vb 1
\&        See odfWorkingDirectory().
.Ve
.PP
\fI\fIooXPath()\fI\fR
.IX Subsection "ooXPath()"
.PP
.Vb 1
\&        Shortcut for OpenOffice::OODoc::XPath->new().
.Ve
.PP
.Vb 9
\&        This function returns an XPath object, that brings all the low level
\&        XML navigation, retrieve, read and write methods of the API. The XPath
\&        class (in the OpenOffice::OODoc context) is an OpenOffice-aware
\&        wrapper for the general XML::Twig API. Unless you are a very advanced
\&        user and you have a particular hack in mind, you should never need to
\&        explicitly create an XPath object. But you must know that every method
\&        or property of this class is inherited by the Text, Image, Styles,
\&        Document and Meta objects. So the knowledge of the corresponding
\&        manual page could be useful.
.Ve
.PP
.Vb 1
\&        See the OpenOffice::OODoc::XPath manual page for detailed syntax.
.Ve
.SH "AUTHOR/COPYRIGHT"
.IX Header "AUTHOR/COPYRIGHT"
Developer/Maintainer: Jean-Marie Gouarne <http://jean.marie.gouarne.online.fr>
.PP
Contact: jmgdoc@cpan.org
.PP
Copyright 2004\-2007 by Genicorp, S.A. <http://www.genicorp.com>
.PP
Initial English version of the reference manual by Graeme A. Hunter
(graeme.hunter@zen.co.uk).
.PP
License:
.PP
.Vb 2
\&        - Licence Publique Generale Genicorp v1.0
\&        - GNU Lesser General Public License v2.1
.Ve
