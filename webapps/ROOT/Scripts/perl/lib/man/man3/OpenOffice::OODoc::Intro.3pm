.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OODoc::Intro 3pm"
.TH OODoc::Intro 3pm "2007-05-11" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
OpenOffice::OODoc::Intro \- Introduction to the Open OpenDocument Connector
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This introductory notice is intended to allow the user to understand the
general principles and to learn some basic features of the OODoc module
without browsing the whole reference manual.
.PP
The reference manual is a set of OpenOffice::OODoc::xxx separate documents,
where xxx is the codename of a particular functional area.  The present
introduction, as well as the OpenOffice::OODoc main chapter, should be read
in order to get the big picture before any attempt to dig in the detailed
documentation.
.PP
Just before reading this intro, it's a good idea to have a look at the
short (and commented) examples provided in the distribution.
.PP
Another general introduction to this Perl OpenDocument Connector has been
published in The Perl Review (issue #3.1, dec. 2006)
<http://www.theperlreview.com>
.PP
There is an alternative intro for french-reading users. It's available in
\&\s-1ODT\s0 (<http://jean.marie.gouarne.online.fr/doc/oodoc_guide.odt>) or \s-1PDF\s0
(<http://jean.marie.gouarne.online.fr/doc/oodoc_guide.pdf>). In addition,
a general presentation in French can be downloaded at
<http://jean.marie.gouarne.online.fr/doc/perl_odf_connector.pdf>
.SH "Overview"
.IX Header "Overview"
The main goal of the Open OpenDocument Connector (OODoc) is to allow
quick application development in 2 areas:
.PP
\&\- replacement of old\-style, proprietary, client-based macros for intensive
and non-interactive document processing;
.PP
\&\- direct read/write operations by enterprise software on office documents,
and/or document-driven applications.
.PP
OODoc provides an abstraction of the document objects and isolates the
programmer from low level \s-1XML\s0 navigation, \s-1UTF8\s0 encoding and file
compression details. For example:
.PP
.Vb 10
\&        use OpenOffice::OODoc;
\&        my $document = ooDocument(file => 'filename.odt');
\&        $document->appendParagraph
\&                        (
\&                        text    => 'Some new text',
\&                        style   => 'Text body'
\&                        );
\&        $document->appendTable("My Table", 6, 4);
\&        $document->cellValue("My Table", 2, 1, "New value");
\&        $document->save;
.Ve
.PP
The script above appends a new paragraph, with given text and style, and
a table with 6 lines and 4 columns, to an existing document, then inserts
a value at a given position in the table. It takes much less time than the
opening of the document with your favourite text processor, and can be
executed without any desktop software connection. A program using this
library can run without any OpenOffice.org installation (and, practically,
OODoc has been tested on platforms where OpenOffice.org is not available
yet).
.PP
More generally, OpenOffice::OODoc provides a lot of methods (probably most
of them are not useful for you) allowing create/search/update/delete
operations with document elements such as:
.PP
\&\- ordinary text containers (paragraphs, headings, item lists);
\&\- tables and cells;
\&\- sections;
\&\- images;
\&\- styles;
\&\- page layout;
\&\- metadata (i.e. title, subject, and other general properties).
.PP
Every document processing begins by the initialization of an object
abstraction of the document. The most usual constructor for this object is
the \fIooDocument()\fR function. When an object is initialized using this function,
it brings a lot of methods allowing allowing the application to retrieve,
read, update, delete or create almost every content and style element.
Another constructor, \fIooMeta()\fR is available in order to allow metadata
processing (see below). These \fIooXxx()\fR methods (and others) are shortcuts
for
.PP
.Vb 1
\&        OpenOffice::OODoc::Xxx->new(options)
.Ve
.PP
where \*(L"Xxx\*(R" is generally \*(L"Document\*(R", for full access to the content, but
may be another specialized object such as \*(L"Manifest\*(R", \*(L"Styles\*(R", \*(L"Meta\*(R", etc.
The long \*(L"OpenOffice::OODoc::...\->\fInew()\fR\*(R" syntax can (and should) be avoided,
and replaced by the \fIooDocument()\fR function.
.PP
A document object initialization requires one or more options. The most
usual option is the file name, as in the first example. By default, this
parameter is regarded as a previously existing file. It's possible to
instantiate a document object with a new, empty document, with an
additional \*(L"create\*(R" option giving the content class of the document to
be generated. So, in our first example, the constructor could be:
.PP
.Vb 5
\&        my $document = ooDocument
\&                        (
\&                        file            => 'filename.odt',
\&                        create          => 'text'
\&                        );
.Ve
.PP
This instruction creates a new file containing a text (i.e. an
OpenOffice.org Writer) document (and replaces any previously existing file
with the same name). However, the new file will be actually created by the
\&\f(CW$document\fR\->save instruction, not by the object initialization.
.PP
When the 'create' option is in use, the newly created document may be
formatted either in the \s-1OASIS\s0 OpenDocument format (\s-1ODF\s0) 1.0 or in the primary
OpenOffice.org 1.0 format. If an additional 'opendocument' is provided and
set to 'true', then the new document will be ODF\-compliant. If the same
option is present and set to 'false', the old OOo 1.0 format will be selected
instead. Without the 'opendocument' option, the format will depend on the
installation default (in the \s-1CPAN\s0 distribution, the default is set to
OpenDocument but it can be changed by the user at the install time). In the
other hand, the provided filename in not used by OODoc in order to
select the file format, so you are free to create an OpenDocument file with
an OOo-like \*(L".sxw\*(R" extension, and so on. The only one filename suffix that
is meaningful for OODoc is \*(L".xml\*(R" (by default, a file whose name is like
\&\*(L"*.xml\*(R" is processed as flat \s-1XML\s0 and not as a regular, compressed \s-1ODF\s0 file).
.PP
For existing files, the format (\s-1ODF\s0 or OOo) is automatically detected
according to the real content of the file (whatever the filename).
.PP
The present version of OpenOffice::OODoc is based on the OpenDocument
specification, which has been published (May 2005) as an \s-1OASIS\s0 standard under
the following title:
.PP
\&\*(L"Open Document Format for Office Applications (OpenDocument) v1.0\*(R"
.SH "Architecture"
.IX Header "Architecture"
The OODoc toolbox is organized in 3 logical layers. It's not necessary for
you to remember the (annoying) details given in the next few paragraphs,
but these details are described only to explain the general organisation of
the modules. If you have only a few dozens of seconds for reading
this document, please jump directly at the part \s-1III\s0 (practical examples)
and come back later if you want to know more.
.Sh "OpenDocument file input/output"
.IX Subsection "OpenDocument file input/output"
The first layer consists of the OpenOffice::OODoc::File class (defined in
the File.pm module). This class is responsible of read/write operations
with the OpenOffice.org physical files. It does every I/O and
compression/uncompression processing. It's mainly an easy\-to\-use,
OpenOffice-oriented wrapper for the standard Archive::Zip Perl
module (but it could be extended to encapsulate any other physical
storage method for the OpenOffice.org documents).
.Sh "\s-1XML\s0 access"
.IX Subsection "XML access"
The second layer is made of the OpenOffice::OODoc::XPath class (XPath.pm), which
is an OpenOffice/XML\-aware class. This class is generally not directly used by
the applications; it's mainly a common ancestor for more specialised (and more
user\-friendly) other classes. OpenOffice::OODoc::XPath is an object-oriented
Perl representation of an \s-1XML\s0 member of an OpenDocument file
(ex: content.xml, meta.xml, styles.xml, etc.), using the XML::Twig
Perl \s-1API\s0 to access individual \s-1XML\s0 elements. If you want to deal in
the same time with several \s-1XML\s0 components of the same document, you
can/must create several OpenOffice::OODoc::XPath against the document (ex: one
OpenOffice::OODoc::XPath will be associated with 'meta.xml' to represent the
metadata, another one will be associated with 'content.xml' to give
access to the content. OpenOffice::OODoc::XPath accepts and provides only \s-1XML\s0
strings from/to the application; but it's able to connect with an
OpenOffice::OODoc::File object for file I/O operation, so you can use it without
explicit file management coding.
.PP
For an example, if you want to get access to the content of any \s-1OO\s0 file
(say 'foo.odt'), you have to write something like:
.PP
.Vb 6
\&        use OpenOffice::OODoc;
\&        my $doc = ooXPath
\&                        (
\&                        file    => 'foo.odt',
\&                        member  => 'content'
\&                        );
.Ve
.PP
then \f(CW$doc\fR becomes an abstraction of the 'content.xml' (i.e. the content
and automatic styles) of the 'foo.odt' file, that can be used to get/set
any content through simple methods like:
.PP
.Vb 1
\&        print $doc->getText('//text:p', 2);
.Ve
.PP
The last instruction outputs the content of the 3rd paragraph as flat,
editable text (because '//text:p' is the logical path to any paragraph,
and the paragraphs are numbered from zero). But don't worry about this
XPath syntax, that is shown here in order to show the basic logic of the \s-1API\s0.
You don't need to remember the path of such usual objects as paragraphs,
headings, lists, images, ..., and other well known document components, because
the 3rd layer (see below) provides easy\-to\-use, predefined accessors.
.PP
You could also put your own text in the same paragraph with:
.PP
.Vb 1
\&        $doc->setText('//text:p', 2, 'My text');
.Ve
.PP
The line above deletes any preceding content in the paragraph and replaces
it by 'My text'. But, for the moment, the paragraph is only changed in
memory; to commit the change and make it persistent in the \s-1OO\s0 file, you
have just to do a
.PP
.Vb 1
\&        $doc->save;
.Ve
.PP
OpenOffice::OODoc::XPath allows some quick element manipulation and exchange,
and can operate on several documents in the same session. For example:
.PP
.Vb 5
\&        my $doc1 = ooXPath(file => 'file1.odt', member => 'content');
\&        my $doc2 = ooXPath(file => 'file2.odt', member => 'content');
\&        my $paragraph = $doc1->getElement('//text:p', 15);
\&        $doc2->insertElement
\&                ('//text:h', 0, $paragraph, position => 'after');
.Ve
.PP
This sequence takes an arbitrary paragraph (the 16th one) of a document
and inserts it just after an arbitrary heading (the first one) in another
document. Here, we used an 'insertElement' method to directly transfer
an existing text element, but the same method (with different arguments)
can create a new element according to application data, or from a well\-
formed \s-1XML\s0 string describing any document element in regular OpenOffice
syntax. Example:
.PP
.Vb 5
\&        # a program
\&        my $doc = ooXPath(file => 'file1.odt', member => 'content');
\&        open MYFILE, "> transfer.xml";
\&        print MYFILE $doc1->exportXMLElement('//text:p', 15);
\&        close MYFILE;
.Ve
.PP
.Vb 6
\&        # another program
\&        my $doc2 = ooXPath(file => 'file2.odt', member => 'content');
\&        open MYFILE, "< transfer.xml";
\&        $doc2->insertElement
\&                ('//text:h', 0, <MYFILE>, position => 'after');
\&        close MYFILE;
.Ve
.PP
These last two short programs produce the same effect as the preceding one,
but the target file can be processed later than the source one and in a
different location, because there is no direct link in the two documents.
The first program exports an \s-1XML\s0 description of the selected element, then
the second program uses this description to create and insert a new element
that is an exact replicate of the exported one. In the meantime, the \s-1XML\s0
intermediate file can be checked, processed and transmitted with any
language and protocol.
.PP
But it's just a beginning, because, in the real world, you have to do
much more sophisticated processing, and you have not a lot of time to
learn the \s-1XML\s0 path of any kind of document element (paragraph, heading,
item list, style, ...).
.Sh "Document-oriented \s-1API\s0"
.IX Subsection "Document-oriented API"
So there is a third, more user-friendly layer, that should be the only one
visible for most of the applications. The programmer should know the
features provided by the first layer (i.e. the XPath object) but should not
explicitly instantiate XPath objects, knowing that all these features are
inherited by more user-friendly objects.
.PP
The third layer is designed as a set of application-oriented
classes, inherited from OpenOffice::OODoc::XPath. In this layer, the basic
principle is \*(L"allow the user to forget \s-1XML\s0\*(R". Each document element is
considered from the user's point of view, and the \s-1XML\s0 path to get it is
hidden. This approach works only if a specialized OpenOffice::OODoc::XPath
class is defined for each kind of content. So, we ultimately need the
following classes:
.PP
.Vb 4
\&        OpenOffice::OODoc::Text for the textual content of any document;
\&        OpenOffice::OODoc::Image to deal with the graphic objects;
\&        OpenOffice::OODoc::Styles for page/style definitions;
\&        OpenOffice::OODoc::Meta for the metadata (meta.xml);
.Ve
.PP
The 3 first ones are generally not expressly used by the applications; they
are internally used by the top level OpenOffice::OODoc::Document class. So
one can see them as \*(L"chapters\*(R" of the functional description of the Document
objects.
.PP
The OpenOffice::OODoc::Text class brings some table processing methods
(table creation, direct access to individual cells). These methods, (under
some conditions) can be used with spreadsheets (OpenOffice.org Calc
documents) as well as with tables included in text documents.
.PP
To illustrate the differences between the layers, with OODoc::Text (if
you know your document is really an OpenOffice.org Writer one), the
two following instructions are equivalent:
.PP
.Vb 2
\&        print $doc->getText('//text:p', 2);
\&        print $doc->getParagraphText(2);
.Ve
.PP
The difference looks tiny, but in fact OODoc::Text contains much more
sophisticated text-aware methods that avoid a lot of coding and probably
a lot of errors. For example, the following code puts the content of an
ordinary perl list (@mydata) in an OpenOffice document as an ordinary
item list:
.PP
.Vb 2
\&        my $list = $doc->appendItemList();
\&        $doc->setText($list, @mydata);
.Ve
.PP
The first instruction creates an empty list at the end of the document body.
The second one populates the new list with the content of an application\-
provided table. The setText method automatically modify its behaviour
according to the functional type of its first argument (with is not the same
for a paragraph as for an itemlist or a table cell).
.PP
The same layer provides some global processing methods such as:
.PP
.Vb 1
\&        my $result = $doc->selectTextContent($filter, \e&myFunction);
.Ve
.PP
that produces a double effect:
.PP
1) it scans the whole document body and extracts the content of every text
element matching a given filter expression (that is an exact string or a
conventional Perl regular expression);
.PP
2) it triggers automatically an application-provided function each time a
matching content is found; the called function can execute any on-the-fly
search/replace/delete operation on the current content and get data from
any external database or communication channel; the return value
of the function automatically replaces the matching string.
.PP
So such a method can be used in sophisticated conditional fusion\-
transformation scripts.
.PP
But you can use the same method to get a flat \s-1ASCII\s0 export of the whole
document, without other processing, if you provide neither filter nor
action:
.PP
.Vb 1
\&        print $doc->getTextContent;
.Ve
.PP
Of course, OODoc can process presentation and not only content.
Example:
.PP
.Vb 6
\&        $filter = 'Dear valued customer';
\&        foreach $element ($doc->selectElementsByContent($filter))
\&                {
\&                $doc->setStyle($element, 'Welcome')
\&                        if $element->isParagraph;
\&                }
.Ve
.PP
After this last code sequence, every paragraph containing the string 'Dear
valued customer' has the 'Welcome' style (assuming 'Welcome' is a paragraph
style, already defined or to be defined in the document).
.PP
A style (like any other document element) can be completely created by
program, or imported (directly or through an \s-1XML\s0 string) from another
document. The second way is generally the better because you need a lot
of parameters to build a completely new style by program, but the creation
of a simple style is not a headache with the OODoc::Styles module,
provided that you have an OpenOffice.org attributes glossary at hand.
The following example show the way to build the \*(L"Welcome\*(R" style.
This piece of code declares \*(L"Welcome\*(R" as a paragraph style, whith
\&\*(L"Text body\*(R" as parent style, and with some private properties
(Times 16 bold font and navy blue foreground).
.PP
.Vb 14
\&        $doc->createStyle
\&                        (
\&                        "Welcome",
\&                        family          => 'paragraph',
\&                        parent          => 'Text body',
\&                        properties      =>
\&                                {
\&                                'area'                  => 'text',
\&                                'style:font-name'       => 'Times',
\&                                'fo:font-size'          => '16pt',
\&                                'fo:font-weight'        => 'bold',
\&                                'fo:color'              => '#000080'
\&                                }
\&                        );
.Ve
.PP
The color attributes are encoded in \s-1RGB\s0 hexadecimal format. It's possible
to use more mnemonic values or symbols, through conversion functions
provided by the Styles module, and optional user-provided colour maps.
For example, \*(L"#ffff00\*(R" could be replaced by odfColor(255,255,0) or more
simply by odfColor(\*(L"yellow\*(R").
.PP
According to the application logic, each newly created style can be
registered either as a \*(L"named\*(R" style (i.e. visible and reusable for the
OpenOffice.org suite end\-user) or as an \*(L"automatic\*(R" style.
.PP
For an ordinary application that needs the best processing facility
for any kind of content and presentation element, the OODoc::Document
module is the best choice. This module defines a special class that
inherits from Text, Image and Styles classes. It allows the programmer,
for example, to simply insert a new paragraph, create an image object,
anchor the image to the paragraph, then create the styles needed to
control the presentation of both the paragraph and the image, all that
in the same sequence and in any order.
.PP
Caution: In order to get a convenient translation between the user's local
character set and the common OpenOffice.org encoding (utf8), the application
must indicate the appropriate encoding. The default one is iso\-8859\-1 in the
\&\s-1CPAN\s0 distribution; it can be set using the \fIooLocalEncoding()\fR function.
Example:
.PP
.Vb 2
\&        use OpenOffice::OODoc;
\&        ooLocalEncoding 'iso-8859-15';
.Ve
.PP
The default encoding can be selected by the user during the installation,
and changed later by editing a configuration file. In addition, a program
working with several documents in the same time can select a distinct
character set for each one.
.SH "Some practical uses"
.IX Header "Some practical uses"
To begin playing with the modules, you should before all see the
self-documented sample scripts provided in the package. These scripts
do nothing really useful, but they show the way to use the modules.
.PP
You should directly load the full library with the single
\&\*(L"use OpenOffice::OODoc\*(R" in the beginning of your scripts.
Then you should only use (in the beginning) the Document and/or Meta
classes only.  We encourage you, in the first time, to avoid any explicit
OODoc::XPath basic method invocation, and to deal only
with available \*(L"intelligent\*(R" modules (Text, Image, Styles, via Document,
and Meta), in order to get immediate results with a minimal effort.
And, if you use this stuff for evangelization purpose, you can show the
code to prove that the OpenOffice.org \s-1XML\s0 format allows a lot of things
with a few lines.
.PP
You can avoid the heavy object oriented notation such as:
.PP
.Vb 1
\&        my $meta = OpenOffice::OODoc::Meta->new(file => "xxx.ods");
.Ve
.PP
and use the shortcuts like:
.PP
.Vb 1
\&        my $meta = ooMeta(file => "xxx.ods");
.Ve
.PP
The first thing you have to do with a document is to create an object
focused on the member you want to work with, and \*(L"feed\*(R" it with regular
OpenOffice.org \s-1XML\s0. The most straightforward way to do that is to create
the object in association with an OpenOffice.org file.
.Sh "Dealing with metadata"
.IX Subsection "Dealing with metadata"
We need metadata access, so we use OODoc::Meta
.PP
.Vb 1
\&        use OpenOffice::OODoc;
.Ve
.PP
.Vb 4
\&        my $doc = ooMeta(file => 'myfile.odt');
\&        my $title = $doc->title;
\&        if ($title)     { print "The title is $title"; }
\&        else            { print "There is no title"; }
.Ve
.PP
Here, because the constructor of OODoc::Meta is called with a 'file'
parameter, OODoc::Meta knows it needs a file access and it dynamically
requires the OODoc::File module, instantiates a corresponding object using
the file name, connects to it, and asks it for the 'meta.xml' member of
the file. All that annoying processing is hidden for the programmer. We
have just to query for the useful object, the title.
.PP
In the same way, we could get (or even change) the document creation
or last modification date registered by the OpenOffice.org software:
.PP
.Vb 2
\&        my $d1 = $doc->creation_date;
\&        my $d2 = $doc->date;
.Ve
.PP
The dates, in the OpenOffice.org documents properties, are stored in
\&\s-1ISO\-8601\s0 format (yyyy\-mm\-ddThh:mm:ss); this format is readable but not
necessarily convenient for any application. But the \s-1API\s0 provides easy to use
tools allowing conversion to or from the regular numeric \fItime()\fR format
of the system, allowing any kind of formatting or calculation.
.PP
We could get more complex metadata structures, such as the user defined
fields:
.PP
.Vb 3
\&        my %ud  = $doc->user_defined;
\&        foreach my $name (keys %ud)
\&                { print $name . '->' . $ud{$name} . "\en"; }
.Ve
.PP
This code captures the user defined fields (names and values) in a hash
table, which then is displayed in a \*(L"name\->value\*(R" form. You could see
the way to update the user defined fields in the 'set_fields' script,
provided with the distribution. The most usual metadata accessors have a
symmetrical behaviour. To update the title, for example, you have to call
the 'title' method with a string argument:
.PP
.Vb 1
\&        $doc->title("New title");
.Ve
.PP
You can proceed in the same way with subject, description, keywords.
.PP
The 'keywords' is an example of polymorphic behaviour (which is quite
common for many OODoc methods):
.PP
.Vb 2
\&        my $keywords = $doc->keywords;
\&        my @keywords = $doc->keywords;
.Ve
.PP
In the first form, the keywords are returned concatenated and comma\-
separated in a single editable text line. In the second one,
we get the keywords as a list. But if 'keywords' is called to add new
keywords, these ones must be provided as a list:
.PP
.Vb 2
\&        $doc->keywords("kw1", "kw2", "kw3");
\&        $doc->keywords(@my_keywords);
.Ve
.PP
The program is automatically prevented from introducing redundancy in
the keyword list (the 'keywords' method deletes duplicates). While
\&'keywords' can only add new keywords, you have to call removeKeyword to
delete an existing keyword. If you want to destroy the entire list of
keywords in a single call, you have just to write:
.PP
.Vb 1
\&        $doc->removeKeywords;
.Ve
.PP
Well, we have done some updates in the metadata, but these updates
apply only in memory. To make it persistent in the file, we have just
to issue a:
.PP
.Vb 1
\&        $doc->save;
.Ve
.PP
I said OODoc::Meta (which is an OODoc::XPath) did not know anything about
the OOo/OpenDocument compressed files. But in my example,the object has been
created with a 'file' argument and associated with an implicit
OODoc::File object. So, the 'save' method of OODoc::XPath is only a
stub method which sends a 'save' command to the connected OODoc::File
object. With an object created with an 'xml' parameter (providing
the metadata through an \s-1XML\s0 string, without reference to a file), a
\&'save' call generates a 'No archive object' error. However, if the object
had been created from an \s-1XML\s0 flat file (instead of a regular
OOo/OpenDocument compressed file), the output would be a flat \s-1XML\s0 file
as well.
.PP
Note: A document is always saved in the same file format as it's source.
The \fIsave()\fR can't act as a format converter. So, you can't save an OOo 1.0
file in \s-1OASIS\s0 OpenDocument format and vice versa, and you can't directly
(without intermediate processing) save in OOo/OpenDocument compressed format
a document loaded from \s-1XML\s0 data. However, thanks to the \fIgetXMLContent()\fR
method, you can write the flat \s-1XML\s0 to the standard output or a given file
handle.
.PP
If you prefer to keep the original file unchanged, you can issue a
.PP
.Vb 1
\&        $doc->save('my_other_file.odt');
.Ve
.PP
that produces the same thing as 'File/SaveAs' in your favorite office
software: if called with an argument, 'save' creates a new file
containing all the changed and unchanged members of the original
one.
.PP
Of course, whatever the way you will use (or not use) the \fIsave()\fR method,
you will never process valuable documents without a backup copy...
.Sh "Example 2 \- Manipulating text"
.IX Subsection "Example 2 - Manipulating text"
Here we must read and update some text content elements. By \*(L"text content\*(R",
we mean not only \*(L"flat text\*(R". While the most interesting module is named
OpenOffice::OODoc::Text, it's not fully dedicated to OOo-Writer documents.
It can deal with the text content of Impress documents, as well as the
sheets and cells of a Calc document.
.PP
Our program begins with something like that:
.PP
.Vb 2
\&        use OpenOffice::OODoc;
\&        my $doc = ooDocument(file => 'myfile.odt');
.Ve
.PP
The second line produces an OpenOffice::OODoc::Document object, which
inherits from O::O::Text, O::O::Image and O::O::Styles. However, in the
present example, we'll use its O::O::Text features only.
.PP
To give a very high level abstract, we can say that OODoc::Text provides
2 kinds of read access methods:
\&\- the 'get' methods that return data referred by unconditional
addressing, like \fIgetParagraph\fR\|(4);
\&\- the 'select' methods that return data selected against a given filter,
related to a text content or an attribute value, like
selectParagraphsByStyle('Text body').
.PP
Some 'get' or 'select' methods return lists while other return individual
elements or values.
.PP
Returned data may be elements or texts. Text data can be exported or
displayed, but the application needs elements to do any read/write
operation on the content. For example:
.PP
.Vb 1
\&        my $text = $doc->getTextContent;
.Ve
.PP
extracts the whole content of the document as a flat, editable text in the
local character set, for immediate use (or display on a dumb terminal).
Of course, there are more the one way to do the same thing, so you can
get the same result with a 'select' method as with a 'get' one if you use
a \*(L"non\-filtering filter\*(R". So:
.PP
.Vb 1
\&        my $text = $doc->selectTextContent('.*');
.Ve
.PP
will also return the whole text content. But this last method, with some
additional arguments and an appropriate filter, is much more powerful,
because it can do 'on\-the\-fly' processing in each text element matching
the filter (for example, insert values extracted from an enterprise
database or resulting from complex calculations).
The output of getTextContent can be tagged according to the type of each
text element, so the application can easily use this method to export the
text in an alternative (simple) markup language.
.PP
To do some intelligent processing in the text, we need to deal with
individual text objects such as paragraphs, headings, list items or table
cells. For example, to export the content of the 5th paragraph (paragraph
numbering beginning with 0), we could directly get th text with:
.PP
.Vb 1
\&        my $text = $doc->getParagraphText(4);
.Ve
.PP
But in order to update the same paragraph, or change its style, I need
the paragraph element, not only its text content:
.PP
.Vb 4
\&        my $para = $doc->getParagraph(4);
\&        # text processing takes place here
\&        $doc->setText($para, $other_text);
\&        $doc->setStyle($para, $my_style);
.Ve
.PP
Some methods can dynamically adapt to the text element type they have
to process. For example, the getText method (exporting the text content
of a given text element), can return the content of many kinds of element
(paragraphs, headings, table cells, item lists or individuals list items).
In addition, any text content extracted with an high-level OODoc method is
transcoded in the local character set (\s-1UTF8\s0 issues are (we hope) hidden for
the application). Optionnally, the text output can be instrumented with
begin and end application-provided tags according to the element type (so
it's possible to export the text in an alternative, simple \s-1XML\s0 dialect, or
in LaTeX, or in an application-specific markup language).
.PP
In order to facilitate some kinds of massive document processing
operations, OODoc::Text provides a few high level methods that do
iterative processing upon whole sets of text elements. One example is
selectElementsByContent: this method looks for any text container matching
a given pattern (string or regular expression) and, each time an element is
selected, it executes an application-provided callback function. An example
of use is provided in the 'search' demo script, which selects any text
element in a document matching a given expression, and appends the selected
content as a sequence of paragraphs in another document.
.PP
The more usual methods have explicit names, and can be used without their
exhaustive documentation, provided that the programmer has a good
understanding of the general philosophy. Heading and paragraph manipulations
are quite simple. The situation is more complex with other text content such
as item lists, tables and graphics.
.PP
To get an individual list item, you must point to it from a previously
obtained list element:
.PP
.Vb 2
\&        my $item_list = $doc->getList(2);
\&        my $item = $doc->getListItem($item_list, 4);
.Ve
.PP
Here, \f(CW$item\fR contains the 5th item of the 3rd list of the document. The
content of the item could then be exported by a generic method such as
\&\fIgetText()\fR, or processed using another method. Note that, if the application
doesn't need the \f(CW$item_list\fR object for any other use, it can directly get
the list item with the same method with a list number (instead of s list
object) as its first argument:
.PP
.Vb 1
\&        my $item = $doc->getListItem(2, 4);
.Ve
.Sh "Playing with tables and spreadsheets"
.IX Subsection "Playing with tables and spreadsheets"
Because the need of data capture within table structures is more evident,
there is a direct accessor to get any individual table cell:
.PP
.Vb 1
\&        my $value = $doc->getCellValue($table, $line, $col);
.Ve
.PP
For example:
.PP
.Vb 1
\&        my $value = $doc->getCellValue(0, 12, 0);
.Ve
.PP
This code example returns the value of the 1st cell of the 13th row of
the 1st table in the document. Note the 'cell value' is simply the text
content if the cell type is string; but if the cell type is any numeric
type, getCellValuereturns the content of the value attribute and ignores
the text. The first argument (the table) can be either the table number
(zero\-based, according to its sequential position in the document) or the
logical table name (as it's get or set by the end-user with OOo Writer
or Calc).
.PP
A cell can be selected in a table using either it's numeric (row, column)
coordinates or a \*(L"spreadsheet\-like\*(R" alphanumeric notation. So, the example
above could be written as
.PP
.Vb 1
\&        my $value = $doc->getCellValue(0, "A11");
.Ve
.PP
Caution, in the classical spreadsheet notation, the column comes first
while it comes last in the numeric coordinates. In addition, knowing that
the numeric coordinates are zero\-based, \*(L"A1\*(R" corresponds to (0,0). Finally,
remember that the alphanumeric coordinates must be provided in a single
string while numeric coordinates require two arguments.
.PP
This alphanumeric notation is probably more user-friendly for OOo Calc
documents, but it's allowed by OODoc whatever the document class: you can
use it with tables in text documents as well.
.PP
Caution: The direct cell addressing works only when the table \s-1XML\s0 storage
is \*(L"normalized\*(R", i.e. when every table object (row, column or cell) is
mapped to an exclusive \s-1XML\s0 element. The application program can easily
ensure this \*(L"normalization\*(R" thanks to the \fInormalizeSheet()\fR method, described
in the OpenOffice::OODoc::Text manual page. However, up to now, the tables
included in text document through OpenOffice.org Writer are normalized, so
they are immediately available for direct addressing. In the other hand,
with OpenOffice.org Calc spreadsheets, several contiguous objects are mapped
to a single \s-1XML\s0 element as long as they have the same content, the same type
and the same presentation. It's not an issue; it's a feature allowed by the
OpenDocument specification in order to save storage space, knowing that
typical large spreadsheets contain a lot of empty, or repetitive, cells. As
a consequence, several cells may be located at the same coordinates. The
\&\fInormalizeSheet()\fR method allows the application to define a safe area, sized
according to its needs, where the direct object addressing works whatever
the \s-1XML\s0 storage method in use.
.PP
The table-related methods can be used with spreadsheets (i.e. OOo Calc
documents) as well as with tables included in text documents. However,
before addressing cells in a spreadsheet document, a program must \*(L"declare\*(R"
the size of the used area in each target sheet (this requirement is due to
performance considerations, for Calc documents only). 
.PP
You can also change the content of a cell:
.PP
.Vb 4
\&        $doc->updateCell($table, $line, $col, $value);
\&        $doc->updateCell($table, $line, $col, $value, $string);
\&        $doc->updateCell($cell, $value);
\&        $doc->updateCell($cell, $value, $string);
.Ve
.PP
The first form puts the \f(CW$value\fR in the target cell, assuming it's a string
cell or, if it's a numeric one, your choice is to put the same content
as the value and the displayable string. The second form (assuming the
target cell is numeric) provides independent content for value and string
(the programmer must know what (s)he does, for example in case of currency or
date cell). The 3rd and 4th forms do respectively the same things, but
use a previously obtained cell element in place of 3D coordinates (in
order to avoid unnecessary low-level XPath recalculation).
.PP
For a flat text (non\-numeric) cell whose the reference is already available,
\&\fIsetText()\fR produces the same result as \fIupdateCell()\fR:
.PP
.Vb 2
\&        my $cell = $doc->getCell($table, $row, $col);
\&        $doc->setText($cell, "The text in the cell");
.Ve
.PP
Both \fIgetCellValue()\fR and \fIupdateCell()\fR can be replaced by the \fIcellValue()\fR
shortcut, that is a read/write accessor to indivudual cells. So:
.PP
.Vb 2
\&        my $value = $doc->cellValue("Sheet4", "B12");
\&        $doc->cellValue("Sheet1", "P5", $value);
.Ve
.PP
copies a value from one cell to another one in another table.
.PP
In this intro, the cells are assumed to be text\-only. Of course, the code
is more complex with numeric cells, because the program have to get or set
some additional information, according to its data type.
.PP
OODoc::Text allows the program to create a new table, using the appendTable
or insertTable method. The following example appends a new table with 8 lines
and 5 columns to the document.
.PP
.Vb 1
\&        my $table = $doc->appendTable("MyTable", 8, 5);
.Ve
.PP
But this new table is (by default) a pure text table. It's possible to build
very sophisticated table structures, with an appropriate data type and a
special presentation for each cell. But, to complete this task, the
application must provide a lot of parameters. So, it's recommended to
avoid purely programmatic table construction, and to reuse existing table
structures and styles in template documents previously created with the
OpenOffice.org software.
.Sh "Sections, subdocuments and hyperlinks"
.IX Subsection "Sections, subdocuments and hyperlinks"
For sophisticated document structures, paragraphs and other text containers
may be included in sections. The \s-1API\s0 allows the applications to easily
create or retrieve sections, whith the \fIgetSection()\fR, \fIappendSection()\fR,
and \fIinsertSection()\fR methods. A given section may be either populated
with a local content or provided with an external link (file path or
\&\s-1URL\s0) in order to include a subdocument. In addition, using \fIlockSection()\fR
and \fIunlockSection()\fR, the programs can control the end-user write protection
of any section.
.PP
The following example (working with OOo 2.0) appends to a master document a
new, write-protected section including a new document which can be reached
through an internet link:
.PP
.Vb 7
\&        my $url = "http://jean.marie.gouarne.online.fr/doc/oodoc_guide.odt";
\&        $doc->appendSection
\&                (
\&                "Getting Started",
\&                link            => $url,
\&                protected       => "true"
\&                );
.Ve
.PP
And, if an unfortunate end-user is barred from updating a section by a lost
password, the programmer can help with a single line such as:
.PP
.Vb 1
\&        $doc->unlockSection($section_name);
.Ve
.PP
Of course, a section can host any local content instead of an external link.
.PP
.Vb 7
\&        my $section = $doc->appendSection("Section 1");
\&        $doc->appendParagraph
\&                (
\&                attachment      => $section,
\&                text            => "The first paragraph in the section",
\&                style           => "Standard"
\&                );
.Ve
.PP
Here, a section is created and receives a paragraph as its first content.
.PP
An existing set of content elements could migrate under a section. The next
example, more sophisticated, selects the list of all the elements that
hierarchically depend on the first level 1 title of the document and moves
these elements to a given section:
.PP
.Vb 2
\&        my @content = $doc->getChapterContent(0, level => 1);
\&        $doc->moveElementsToSection("Section 1");
.Ve
.PP
The sections are not the only places for using hyperlinks. The applications
can associate hyperlinks to any portion of text. The following example puts
a remote (http) link on every \*(L"OpenDocument\*(R" character string in a given
paragraph:
.PP
.Vb 2
\&        $doc->setHyperlink
\&                ($para, "OpenDocument", "http://www.oasis-open.org");
.Ve
.PP
The target of an hyperlink may be a bookmark or a heading in the current
document or in another \s-1ODF\s0 document. For example, if the target is a bookmark
included in the same document, the link is the name of the bookmark with a
leading \*(L"#\*(R":
.PP
.Vb 1
\&        $doc->setHyperlink($para, "a string", "#MyMark");
.Ve
.PP
When the target is a heading (i.e. a hierarchical title), the link is made of
the text of the heading, prefixed with \*(L"#\*(R" and suffixed by \*(L"|outline\*(R".
.PP
If an hyperlink is aimed at any target belonging to another document (in the
local filesystem or elsewhere), you have just to concatenate the file path
and the internal path. The example below puts an hyperlink to a particular
heading located in a remote document:
.PP
.Vb 5
\&        $doc->setHyperlink
\&                (
\&                $para, "read the conclusion",
\&                "http://somewhere.com/somewhat.odt#Conclusion|outline"
\&                );
.Ve
.Sh "Manipulating variables, bibliographic entries, bookmarks"
.IX Subsection "Manipulating variables, bibliographic entries, bookmarks"
The OODoc toolbox provides easy read/write accessors to some useful objects
that can be included in OOo text documents.
.PP
If a text document contains a user-defined field, the corresponding value can
be read and updated. For example, if the user needs to increase a numeric
by a given value, the corresponding code could be:
.PP
.Vb 2
\&        $old_value = $doc->userFieldValue("FieldName");
\&        $doc->userFieldValue("FieldName", $old_value + $added_value);
.Ve
.PP
Any OpenDocument-compliant variable text field may be inserted in a document
through the \fItextField()\fR method. The next example appends a paragraph whose
text content is \*(L"This document contains <page\-count> pages\*(R", knowing that
the real page count will be dynamically displayed by the office software:
.PP
.Vb 4
\&        my $p = $doc->appendParagraph
\&                (text => "This document contains ");
\&        $doc->appendElement($p, $doc->textField('page-count'));
\&        $doc->extendText($p, " pages");
.Ve
.PP
It's possible to get or set any property of a bibliography entry. An entry
can be selected by its identifier (as it appears for the end\-user). The first
example below prints the title and the author of the first found occurrence
of a \*(L"[\s-1GEN99\s0]\*(R" entry, while the second one creates (or updates) its \*(L"\s-1ISBN\s0\*(R"
and \*(L"pages\*(R" properties:
.PP
.Vb 4
\&        # 1
\&        my %properties = $doc->bibliographyEntryContent("GEN99");
\&        print "Title = $properties{'title'}\en";
\&        print "Author = $properties{'author'}\en";
.Ve
.PP
.Vb 7
\&        # 2
\&        $doc->bibliographyEntryContent
\&                        (
\&                        "GEN99",
\&                        isbn    => 'xxxxyyyyzzzz',
\&                        pages   => 254
\&                        );
.Ve
.PP
In addition, a \fIgetBibliographyEntries()\fR method allows the user to retrieve
the full list of the entries included in a document.
.PP
We can put a bookmark in a paragraph containing a given string.
Example:
.PP
.Vb 2
\&        my $paragraph   = $doc->selectElementByContent("my search string");
\&        $doc->setBookmark($paragraph, "MyMark");
.Ve
.PP
The instruction above puts the mark at the beginning of the paragraph;
however, if an optional offset argument is provided, \fIsetBookmark()\fR could
put the mark at any position within the text.
.PP
A bookmark (created either through OpenOffice::OODoc or through this Perl
\&\s-1API\s0) can be used to retrieve a text element:
.PP
.Vb 1
\&        my $paragraph = $doc->selectElementByBookmark("MyMark");
.Ve
.Sh "Dealing with text \s-1AND\s0 metadata"
.IX Subsection "Dealing with text AND metadata"
Sometimes we must access both the text content and the metadata. So, we need
two OODoc::XPath objects : one OODoc::Document and one OODoc::Meta. And to
avoid collisions and inefficient I/O operations, we need to connect the 2
objects with the same OODoc::File \*(L"server\*(R".
.PP
.Vb 1
\&        use OpenOffice::OODoc;
.Ve
.PP
.Vb 5
\&        my $archive     = ooFile('myfile.odt');
\&        my $content     = ooDocument(archive => $archive);
\&        my $meta        = ooMeta(archive => $archive);
\&        # process content and metadata
\&        $archive->save;
.Ve
.PP
In this case, the OODoc::Document and OODoc::Meta objects are created with
an 'archive' parameter, so they are required to connect to an existing
OODoc::File object. After processing, a 'save' call directly addressed
to the OODoc::File is sufficient to do the physical file update, because
this object \*(L"knows\*(R" the list of the OODoc::XPath objects connected to it,
and \*(L"asks\*(R" to each of them the \s-1XML\s0 content it's responsible of (the other
\&\s-1XML\s0 members of the file remain unchanged).
.PP
In the example above, if the user writes 'file' instead of 'archive', the
\&\s-1API\s0 automatically detects the real type of the \f(CW$archive\fR value (i.e. an
OODoc::File object) and adapts its behaviour accordingly. So, one can use
the 'file' option either if the parameter is really a file path/name or if
it's a reference to a previously instantiated \s-1ODF\s0 archive.
.PP
However, the explicit use of OODoc::File is not mandatory. The example above
could be written in a different way:
.PP
.Vb 1
\&        use OpenOffice::OODoc;
.Ve
.PP
.Vb 4
\&        my $content     = ooDocument(file => 'myfile.odt');
\&        my $meta        = ooMeta(file => $content);
\&        # process content and metadata
\&        $content->save;
.Ve
.PP
This last sequence sounds strange because the 'file' option of \fIooMeta()\fR
is an OODoc::Document (i.e. an OODoc::XPath object) and not a file. But
OpenOffice::OODoc encourages your laziness: if the value type of the
\&'file' option is OODoc::XPath (and neither a file path nor an OODoc::File
object), it knows you want share a file interface already used. So you get
the same result as in the previous example, but the common OODoc::File object
is not visible. The final \fIsave()\fR could be issued from anyone of the document
objects.
.PP
There is an example of simultaneous access to content and metadata in the
script 'set_title' (where some text content is used to generate a piece
of metadata).
.Sh "Manipulating graphics"
.IX Subsection "Manipulating graphics"
The module OODoc::Image brings some functionalities that can be used
against any \s-1OO\s0 document. The following code (combining the capabilities
of OODoc::Text and OODoc::Image) selects the first paragraph containing
the string \*(L"OpenOffice\*(R" and attach an imported image to it.
.PP
.Vb 11
\&        my $p = $doc->selectElementByContent("OpenOffice");
\&        die "Paragraph not found" unless $p;
\&        $doc->createImageElement
\&                (
\&                "Paris landscape",
\&                description     => "Montmartre in winter",
\&                attachment      => $p,
\&                import          => "C:\eMyDocuments\emontmartre.jpg",
\&                size            => "5cm, 3.5cm",
\&                style           => "graphics2"
\&                );
.Ve
.PP
In a spreadsheet document, the same image could be attached to a cell
instead of a paragraph; to do so, the \*(L"attachment\*(R" option should be set
to a cell element, previously obtained using \fIgetCell()\fR. With the same syntax,
in a presentation document, the \*(L"attachment\*(R" should be a draw page, previously
selected using \fIgetDrawPage()\fR. A \*(L"page\*(R" option allows the user to anchor an
image to a page, instead of attaching it to a text container.
.PP
In this example, the image is physically imported. But I could replace the
\&\*(L"import\*(R" parameter by a \*(L"link\*(R" one, in order to use the image as an external
link (cf. the \*(L"link\*(R" option when you insert an image in OpenOffice.org). This
link could use a local filesystem path as well as a remote access path such
as \*(L"http://...\*(R".
.PP
My new image needs a style (called \*(L"graphics2\*(R" in my example) to be presented.
This style could be an existing one, but my program could create it if
needed, using an OODoc::Styles method (see below).
.PP
Any characteristic of an existing image can be read or updated using simple
methods. For example, it's easy to change the size and the position of my
image:
.PP
.Vb 2
\&        $doc->imageSize("Paris landscape", "10cm, 7cm");
\&        $doc->imagePosition("Paris landscape", "3cm, 0cm");
.Ve
.PP
The size and position strings indicate the used length unit. Such units as
\&\*(L"cm\*(R", \*(L"mm\*(R", \*(L"in\*(R" and \*(L"pt\*(R" are currently supported by OpenOffice.org (but
OODoc doesn't check them, so you can use any arbitrary unit).
.PP
The logical name of the image (here \*(L"Paris landscape\*(R") is the best way to
retrieve an image object, so it's a mandatory argument with the
createImageElement method. With OpenOffice.org Writer, each image is created
with an unique name (that is \*(L"Image1\*(R", \*(L"Image2\*(R", etc. if the user doesn't
provide a more significant one). But with OpenOffice.org Impress, the images
are unnamed by default. We recommend you to give a significant name to each
object that you want to process later by program, knowing that if an object
can be easily caught by program, it's potentially reusable.
.PP
An image can be selected by his description (i.e. the text the end-user
can edit in the image properties dialog in OpenOffice.org). So, the following
sequence provides the list of images whose the description contains the string
\&\*(L"Montmartre\*(R":
.PP
.Vb 1
\&        my @images = $doc->selectImageElementsByDescription("Montmartre");
.Ve
.PP
If you have to store and process a graphical content out of the OpenOffice.org
software, you can export it as an ordinary file:
.PP
.Vb 1
\&        $doc->exportImage("Paris landscape", "/home/pictures/montmartre.jpg");
.Ve
.PP
And you can use a symmetric importImage method to change the content of an
image element.
.Sh "Managing styles"
.IX Subsection "Managing styles"
The OODoc::Styles allows the programmer to get any style definition, to change
it and, if really needed, to create new styles. In the first part of this
document, you can see an example of paragraph style creation. Unfortunately,
createStyle could drive you to heavy coding efforts, because a very
sophisticated style definition needs a lot of parameters and requires the
knowledge of a lot of OpenOffice.org attribute names. So we recommend you to
systematically reuse existing styles (stored in \s-1OO\s0 template documents used as
\&\*(L"style repositories\*(R" or in \s-1XML\s0 databases). The createStyle method supports
a \*(L"prototype\*(R" parameter that allows you to clone an existing style, contained
in the same document or in another one.
.PP
The next code sequence selects the \*(L"Text body\*(R" style of a document, and uses
it as a template to create a \*(L"My Text body\*(R" style in another document,
changing the font size only:
.PP
.Vb 13
\&        my $template = $doc1->getStyleElement("Text body");
\&        $doc2->createStyle
\&                        (
\&                        "My Text Body",
\&                        family          => "paragraph",
\&                        prototype       => $template,
\&                        properties      =>
\&                                {
\&                                "area"          => "text",
\&                                "fo:font-size"  => "12pt",
\&                                "fo:color"      => odfColor("dark blue")
\&                                }
\&                        );
.Ve
.PP
(Here a \*(L"dark blue\*(R" color has been given to the text; but \*(L"dark blue\*(R" is
an arbitrary string, that must be present in a user\-provided, previously
loaded color map; without this color map, the users must, at their choice,
either directly provide an hexadecimal, OOo-compliant color code (such as
\&\*(L"#00008b\*(R", that is the translation of \*(L"dark blue\*(R" in my installation), or
get it through the \fIodfColor()\fR function with 3 decimal \s-1RGB\s0 values as arguments.)
.PP
Because a style is required for each image in a document, the OODoc::Document
brings a more user-friendly createImageStyle method. This method allows you
to create an image style without any mandatory parameter (excepted the name).
So, the \*(L"graphics2\*(R" style I invoked in a previous createImage example could
be simply created by:
.PP
.Vb 1
\&        $doc->createImageStyle("graphics2");
.Ve
.PP
Without other indication, the module automatically creates a style with
\&\*(L"reasonable\*(R" values, so the image is really visible in the document. Of
course, the application could provide explicit values for some parameters
if needed. The following call, for example, provides specific values for
contrast, luminance and gamma correction:
.PP
.Vb 10
\&        $doc->createImageStyle
\&                        (
\&                        "graphics2",
\&                        properties      =>
\&                                {
\&                                'draw:contrast'         => '2%',
\&                                'draw:luminance'        => '-3%',
\&                                'draw:gamma'            => '1.1'
\&                                }
\&                        );
.Ve
.PP
Styles are not made only to control the presentation of individual elements.
There are special styles for page layout. While these styles are described
with very specific data structures, the OODoc::Styles module contains
some methods dedicated to page styling.
.PP
A few executable examples (not commented here, but commented in line) are
provided in the distribution. In addition, you can have a look to the
installation test scripts.
.SH "COMMENTS AND BUG REPORTS"
.IX Header "COMMENTS AND BUG REPORTS"
Comments, questions and answers are welcome through the \s-1CPAN\s0 forum
<http://www.cpanforum.com/dist/OpenOffice\-OODoc>
.PP
Bug reports should be sent using
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=OpenOffice\-OODoc>
.SH "AUTHOR/COPYRIGHT"
.IX Header "AUTHOR/COPYRIGHT"
Developer/Maintainer: Jean-Marie Gouarne <http://jean.marie.gouarne.online.fr>
.PP
Contact: jmgdoc@cpan.org
.PP
Copyright 2004\-2007 by Genicorp, S.A. <http://www.genicorp.com>
.PP
Initial English version of the reference manual by Graeme A. Hunter
(graeme.hunter@zen.co.uk).
.PP
License:
.PP
.Vb 2
\&        - Licence Publique Generale Genicorp v1.0
\&        - GNU Lesser General Public License v2.1
.Ve
