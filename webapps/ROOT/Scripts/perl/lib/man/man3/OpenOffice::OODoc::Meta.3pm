.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OODoc::Meta 3pm"
.TH OODoc::Meta 3pm "2007-05-11" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
OpenOffice::OODoc::Meta \- Access to document metadata
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The OpenOffice::OODoc::Meta class is a specialist derivative of
OpenOffice::OODoc::XPath for \s-1XML\s0 members which describe the metadata
of OpenDocument (\s-1ODF\s0) and OpenOffice.org documents.
.Sh "Methods"
.IX Subsection "Methods"
\fIConstructor : OpenOffice::OODoc::Meta\->new(<parameters>)\fR
.IX Subsection "Constructor : OpenOffice::OODoc::Meta->new(<parameters>)"
.PP
.Vb 1
\&        Short Form: ooMeta(<parameters>)
.Ve
.PP
.Vb 1
\&        See OpenOffice::OODoc::XPath->new (or ooXPath)
.Ve
.PP
.Vb 2
\&        Returns an OpenDocument connector allowing subsequent access to
\&        the metadata of a well-formed, ODF-compliant document.
.Ve
.PP
.Vb 1
\&        The XML member loaded by default is 'meta.xml'.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 1
\&            $my meta    = ooMeta(file => 'document.odt');
.Ve
.PP
.Vb 2
\&        returns a new object which represents the metadata of the
\&        OpenOffice.org "document.odt".
.Ve
.PP
\fIaddKeyword(text)\fR
.IX Subsection "addKeyword(text)"
.PP
.Vb 2
\&        Adds the given text to the list of document keywords if not already
\&        found.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 3
\&            $meta->addKeyword("document management");
\&            $meta->addKeyword("office");
\&            $meta->addKeyword("tech watch");
.Ve
.PP
\fI\fIcreation_date()\fI\fR
.IX Subsection "creation_date()"
.PP
.Vb 2
\&        Without argument, returns the document's creation date in
\&        OpenOffice.org (ISO-8601) format.
.Ve
.PP
.Vb 1
\&        Example of returned value:
.Ve
.PP
.Vb 1
\&            2002-11-12T08:22:50
.Ve
.PP
.Vb 2
\&        The returned value can be converted in standard numeric time format
\&        with the ooTimelocal() function.
.Ve
.PP
.Vb 4
\&        With argument, inserts the given string (without checking) as the
\&        creation date. The argument, if any, must comply with the ODF
\&        (ISO-8601) date format. The ooLocaltime() function can be used in
\&        order to convert a regular Perl time() value in ODF.
.Ve
.PP
.Vb 2
\&        The OpenOffice.org desktop software never changes this value, but
\&        this method allows the user to read or write it.
.Ve
.PP
.Vb 1
\&        See also date().
.Ve
.PP
\fI\fIcreator()\fI\fR
.IX Subsection "creator()"
.PP
.Vb 2
\&        Without argument, returns the document creator's name. The creator
\&        is generally the author of the last update. See also initial_creator().
.Ve
.PP
.Vb 1
\&        With argument, modifies the document author's name.
.Ve
.PP
\fI\fIdate()\fI\fR
.IX Subsection "date()"
.PP
.Vb 2
\&        Without argument, returns the document's date of last modification,
\&        in OpenOffice.org format.
.Ve
.PP
.Vb 4
\&        With argument, inserts the given string (without checking) as the
\&        last modification date. The argument, if any, must comply with the
\&        OOo date format (ISO-8601). The ooLocaltime() function can be used
\&        in order to convert a regular Perl time() value in OOo format.
.Ve
.PP
.Vb 2
\&        The returned value can be converted in standard numeric time format
\&        with the ooTimelocal() function.
.Ve
.PP
\fI\fIdescription()\fI\fR
.IX Subsection "description()"
.PP
.Vb 2
\&        Without argument, returns the contents of the document properties
\&        "Description" field.
.Ve
.PP
.Vb 1
\&        With argument, inserts the given text in the "Description" field.
.Ve
.PP
\fI\fIediting_cycles()\fI\fR
.IX Subsection "editing_cycles()"
.PP
.Vb 3
\&        Without argument, returns the number of edit sessions (i.e. saves,
\&        under OpenOffice.org or StarOffice). Or, technically, the number of
\&        versions.
.Ve
.PP
.Vb 1
\&        With argument, modifies this number without checking.
.Ve
.PP
\fI\fIediting_duration()\fI\fR
.IX Subsection "editing_duration()"
.PP
.Vb 2
\&        Without argument, returns the total editing time for the document,
\&        in OpenOffice.org date/time format.
.Ve
.PP
.Vb 1
\&        For example, the returned string can be:
.Ve
.PP
.Vb 1
\&            P2DT11H27M33S
.Ve
.PP
.Vb 2
\&        which in this case means that the document has been edited for 2
\&        days, 11 hours, 27 minutes and 33 seconds.
.Ve
.PP
.Vb 2
\&        With argument, forces a new value into this property without
\&        checking.
.Ve
.PP
\fI\fIgenerator()\fI\fR
.IX Subsection "generator()"
.PP
.Vb 2
\&        Without argument, returns a label representing the signature of the
\&        software which generated the document. Example of signature:
.Ve
.PP
.Vb 1
\&            "OpenOffice.org 1.1.1 (Linux)"
.Ve
.PP
.Vb 1
\&        With argument, inserts any signature.
.Ve
.PP
\fI\fIinitial_creator()\fI\fR
.IX Subsection "initial_creator()"
.PP
.Vb 3
\&        Like creator(), but apply to the creator of the first version of the
\&        document. The OOo desktop software never updates this value, but this
\&        method allows the user to read or write it.
.Ve
.PP
\fI\fIkeywords()\fI\fR
.IX Subsection "keywords()"
.PP
.Vb 4
\&        Without argument, returns a list of the document's keywords. In a
\&        list context, the result is a table where each element is a keyword.
\&        In a scalar context, the keywords are returned in a single character
\&        string, each of which is separated by a comma and a space.
.Ve
.PP
.Vb 3
\&        With arguments, adds a list of keywords to the existing one. The
\&        only checking carried out is to see if the keyword already exists,
\&        if so it is not added.
.Ve
.PP
\fI\fIlanguage()\fI\fR
.IX Subsection "language()"
.PP
.Vb 2
\&        Without argument, returns the content of the language variable.
\&        Example:
.Ve
.PP
.Vb 1
\&            fr_FR
.Ve
.PP
.Vb 2
\&        With argument, changes the content of this variable without
\&        checking.
.Ve
.PP
\fIremoveKeyword(keyword)\fR
.IX Subsection "removeKeyword(keyword)"
.PP
.Vb 1
\&        Removes the given keyword if it exists.
.Ve
.PP
\fI\fIstatistic()\fI\fR
.IX Subsection "statistic()"
.PP
.Vb 3
\&        Without argument, returns a hash which represents the entire
\&        "statistics" section of the metadata. The content depends on the
\&        type of document.
.Ve
.PP
.Vb 1
\&        Text
.Ve
.PP
.Vb 7
\&                'meta:table-count'      => number of tables
\&                'meta:image-count'      => number of images
\&                'meta:object-count'     => number of OLE objects
\&                'meta:page-count'       => number of pages
\&                'meta:paragraph-count'  => number of paragraphs
\&                'meta:word-count'       => number of words
\&                'meta:character-count'  => number of characters
.Ve
.PP
.Vb 1
\&        Spreadsheet
.Ve
.PP
.Vb 3
\&                'meta:table-count'      => number of sheets
\&                'meta:cell-count'       => number of non-empty cells
\&                'meta:object-count'     => number of objects (images, etc.)
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 5
\&            my $meta    = OpenOffice::OODoc::Meta->new("invoice.sxc");
\&            my %stat    = $meta->statistic;
\&            print       "This invoice contains " .
\&                "$stat{'meta:cell-count'} cells and "   .
\&                "$stat{'meta:table-count'} pages\en";
.Ve
.PP
.Vb 4
\&        With arguments, you can modify (or falsify ?!) all or some of the
\&        statistical data and even create attributes which are not created by
\&        the OpenOffice.org or StarOffice software. Arguments are passed in
\&        pairs [key => value] and handled without checking.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 2
\&            $meta->statistic
\&                ('meta:table-count' => '4', 'status' => 'OK');
.Ve
.PP
.Vb 2
\&        This example forces the number of tables to 4 (whatever the reality)
\&        and adds an arbitrary attribute 'status' with value 'OK'.
.Ve
.PP
.Vb 8
\&        Note : Such forced attributes do not upset the function of
\&        OpenOffice.org which ignores them. They could therefore be useful in
\&        programs which handle documents out of reach of the end user.
\&        However, if such a document is then edited or updated by
\&        OpenOffice.org or StarOffice (using currently released versions),
\&        these "foreign" attributes will be lost and the software will
\&        replace what it considers to be the "real" values to those
\&        attributes it manages.
.Ve
.PP
\fI\fIsubject()\fI\fR
.IX Subsection "subject()"
.PP
.Vb 1
\&        Without argument, returns the document's subject.
.Ve
.PP
.Vb 1
\&        With argument, adds a new subject to the document.
.Ve
.PP
\fI\fItitle()\fI\fR
.IX Subsection "title()"
.PP
.Vb 1
\&        Without argument, returns the document's title.
.Ve
.PP
.Vb 1
\&        With argument, adds a new title to the document.
.Ve
.PP
\fI\fIuser_defined()\fI\fR
.IX Subsection "user_defined()"
.PP
.Vb 4
\&        Returns a list of the four fields which appear in the User tab of
\&        the Properties dialog in OpenOffice.org. These fields are called, by
\&        default, "Info 1" to "Info 4". The end user can change their names
\&        and their content.
.Ve
.PP
.Vb 3
\&        The list is returned in the form of a hash of 4 elements whose
\&        keywords represent the field names and whose values represent their
\&        content.
.Ve
.PP
.Vb 2
\&        By supplying a similar hash of 4 elements as an argument, this
\&        method deletes and replaces the existing content.
.Ve
.PP
.Vb 3
\&        If the number of elements supplied in the hash is less than 4, the
\&        last fields are left untouched. If, however, the hash contains more
\&        than 4 elements, only the first 4 are taken into account.
.Ve
.Sh "Properties"
.IX Subsection "Properties"
.Vb 1
\&        As for OpenOffice::OODoc::XPath
.Ve
.Sh "Exported functions"
.IX Subsection "Exported functions"
\fIooLocaltime([$time_value])\fR
.IX Subsection "ooLocaltime([$time_value])"
.PP
.Vb 4
\&        Converts the numeric time given in argument to an OpenOffice-compliant
\&        date (ISO-8601). The argument type is the same as for the standard
\&        Perl localtime() function, i.e. a number of seconds since the "epoch".
\&        It can be, for example, a value previously returned by a time() call.
.Ve
.PP
.Vb 1
\&        Without argument, returns the current local time in OOo format.
.Ve
.PP
.Vb 2
\&        The result of this function can be used as an argument for the date()
\&        or creation_date() methods of OpenOffice::OODoc::Meta.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 1
\&                $doc->date(ooLocaltime());
.Ve
.PP
.Vb 2
\&        This line puts the current time as the last modification date in the
\&        document (assuming $doc is an OpenOffice::OODoc::Meta object).
.Ve
.PP
\fIooTimelocal($oodate)\fR
.IX Subsection "ooTimelocal($oodate)"
.PP
.Vb 4
\&        Converts a date in OOo format (ISO-8601) in a regular Perl numeric
\&        time format, i.e. a number of seconds since the "epoch". So, the
\&        returned value can be processed with any Perl date formatting or
\&        calculation function.
.Ve
.PP
.Vb 1
\&        Example:
.Ve
.PP
.Vb 5
\&                my $date_created = ooTimelocal($doc->creation_date());
\&                $lt = localtime($date_created);
\&                $elapsed = time() - $date_created;
\&                print "This document has been created $date_created\en";
\&                print "$elapsed seconds ago";
.Ve
.PP
.Vb 3
\&        This sequence prints the creation date of a document in local time
\&        string format, then prints the number of seconds between the creation
\&        date and now.
.Ve
.PP
.Vb 1
\&        Note: This function requires the Time::Local Perl module.
.Ve
.SH "AUTHOR/COPYRIGHT"
.IX Header "AUTHOR/COPYRIGHT"
Developer/Maintainer: Jean-Marie Gouarne <http://jean.marie.gouarne.online.fr>
.PP
Contact: jmgdoc@cpan.org
.PP
Copyright 2004\-2006 by Genicorp, S.A. <http://www.genicorp.com>
.PP
Initial English version of the reference manual by Graeme A. Hunter
(graeme.hunter@zen.co.uk).
.PP
License:
.PP
.Vb 2
\&        - Licence Publique Generale Genicorp v1.0
\&        - GNU Lesser General Public License v2.1
.Ve
