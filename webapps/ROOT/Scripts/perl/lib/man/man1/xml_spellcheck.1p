.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML_SPELLCHECK 1p"
.TH XML_SPELLCHECK 1p "2007-07-20" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
xml_spellcheck \- spellcheck XML files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  xml_spellcheck [options] <files>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
xml_spellcheck lets you spell check the content of an \s-1XML\s0 file.
It extracts the text (the content of elements and optionally of
attributes), call a spell checker on it and then recreates the
\&\s-1XML\s0 document.
.SH "OPTIONS"
.IX Header "OPTIONS"
Note that all options can be abbreviated to the first letter
.IP "\-\-conf <configuration_file>" 4
.IX Item "--conf <configuration_file>"
Gets the options from a configuration file. \s-1NOT\s0 \s-1IMPLEMENTED\s0 \s-1YET\s0.
.IP "\-\-spellchecker <spellchecker>" 4
.IX Item "--spellchecker <spellchecker>"
The command to use for spell checking, including any option
.Sp
By default \f(CW\*(C`aspell \-c\*(C'\fR is used
.IP "\-\-backup\-extension <extension>" 4
.IX Item "--backup-extension <extension>"
By default the original file is saved with a \f(CW\*(C`.bak\*(C'\fR extension. This option
changes the extension
.IP "\-\-attributes" 4
.IX Item "--attributes"
Spell check attribute content. By default attribute values are \s-1NOT\s0
spell checked. \s-1NOT\s0 \s-1YET\s0 \s-1IMPLEMENTED\s0
.IP "\-\-exclude_elements <list_of_excluded_elements>" 4
.IX Item "--exclude_elements <list_of_excluded_elements>"
A list of elements that should not be spell checked
.IP "\-\-include_elements <list_of_included_elements>" 4
.IX Item "--include_elements <list_of_included_elements>"
A list of elements that should be spell checked (by default all elements
are spell checked). 
.Sp
\&\f(CW\*(C`\-\-exclude_elements\*(C'\fR and \f(CW\*(C`\-\-include_elements\*(C'\fR are mutually exclusive
.IP "\-\-pretty_print <optional_pretty_print_style>" 4
.IX Item "--pretty_print <optional_pretty_print_style>"
A pretty print style for the document, as defined in XML::Twig. If
the option is provided without a value then the \f(CW\*(C`indented\*(C'\fR style is
used
.IP "\-\-version" 4
.IX Item "--version"
Dislay the tool version and exit
.IP "\-\-help" 4
.IX Item "--help"
Display help message and exit
.IP "\-\-man" 4
.IX Item "--man"
Display longer help message and exit
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SH "BUGS"
.IX Header "BUGS"
.SH "TODO"
.IX Header "TODO"
.IP "\-\-conf option" 4
.IX Item "--conf option"
.PD 0
.IP "\-\-attribute option" 4
.IX Item "--attribute option"
.PD
.SH "PRE-REQUISITE"
.IX Header "PRE-REQUISITE"
XML::Twig, Getopt::Long, Pod::Usage, File::Temp
XML::Twig requires XML::Parser.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XML::Twig
.SH "COPYRIGHT AND DISCLAIMER"
.IX Header "COPYRIGHT AND DISCLAIMER"
This program is Copyright 2003 by Michel Rodriguez
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the Perl Artistic License or the \s-1GNU\s0 General 
Public License as published by the Free Software Foundation either
version 2 of the License, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MER\-\s0
\&\s-1CHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General
Public License for more details.
.PP
If you do not have a copy of the \s-1GNU\s0 General Public License write to
the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, \s-1MA\s0 02139,
\&\s-1USA\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michel Rodriguez <mirod@xmltwig.com>
.PP
xml_spellcheck is available at http://www.xmltwig.com/xmltwig/
